//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.0.
// 
#pragma warning disable 1591

namespace MotionsRace.Droid.MotionsRaceService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MobileServiceSoap", Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class MobileService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAvailableMedalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableMedalsTranslatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback EarnMedalOperationCompleted;
        
        private System.Threading.SendOrPostCallback EarnMedalTranslatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnearnMedalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNumberOfMedalsPerPersonOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyNewsStreamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamStreamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWhatsGoingOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyRankingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRacesAPersonCanLoginToOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRacesAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRaceByRaceKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeRaceAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrandSpecificTranslationStringsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrandSpecificTranslationStringsIOSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTrainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTrainingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalNumberOfPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrainingForCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrainingTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMostRecentTrainingInTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDailyActivityScoresOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHighscores_BestSubTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHighscores_BestPersonsInTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRisingStarOfTheWeekOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHighscores_BestPersonsInMyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsMyFriendOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyFriendsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveFriendOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFriendsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMostRecentTeamActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPersonsOfTheTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamsByRaceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIfPersonIsManagerOfTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamsPersonIsAManagerOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamsPersonIsAMemberOfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTeamPictureURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNumberOfUnreadPersonalMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkPersonalMessagesAsReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkOrUnmarkPersonalMessageAsReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchivePersonalMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPersonalMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSentPersonalMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPersonalMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePersonalMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateReplyToMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThreadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePostingOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkThreadAsReadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThreadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPersonInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveGoalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGoalOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteGoalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGoalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGoalPeriodResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRaceFromSignUpCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMySettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPersonToTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePictureURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMySettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParticipantOverviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback TemplateCallHelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateAndCreateSecretOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateAndCreateSecret_AlternateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MobileService() {
            this.Url = "http://service.funbeatrace.c2labs.se/MobileService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAvailableMedalsCompletedEventHandler GetAvailableMedalsCompleted;
        
        /// <remarks/>
        public event GetAvailableMedalsTranslatedCompletedEventHandler GetAvailableMedalsTranslatedCompleted;
        
        /// <remarks/>
        public event EarnMedalCompletedEventHandler EarnMedalCompleted;
        
        /// <remarks/>
        public event EarnMedalTranslatedCompletedEventHandler EarnMedalTranslatedCompleted;
        
        /// <remarks/>
        public event UnearnMedalCompletedEventHandler UnearnMedalCompleted;
        
        /// <remarks/>
        public event GetNumberOfMedalsPerPersonCompletedEventHandler GetNumberOfMedalsPerPersonCompleted;
        
        /// <remarks/>
        public event GetMyNewsStreamCompletedEventHandler GetMyNewsStreamCompleted;
        
        /// <remarks/>
        public event GetTeamStreamCompletedEventHandler GetTeamStreamCompleted;
        
        /// <remarks/>
        public event GetWhatsGoingOnCompletedEventHandler GetWhatsGoingOnCompleted;
        
        /// <remarks/>
        public event GetMyRankingCompletedEventHandler GetMyRankingCompleted;
        
        /// <remarks/>
        public event GetRacesAPersonCanLoginToCompletedEventHandler GetRacesAPersonCanLoginToCompleted;
        
        /// <remarks/>
        public event GetRacesAvailabilityCompletedEventHandler GetRacesAvailabilityCompleted;
        
        /// <remarks/>
        public event AuthenticateLoginCompletedEventHandler AuthenticateLoginCompleted;
        
        /// <remarks/>
        public event GetRaceByRaceKeyCompletedEventHandler GetRaceByRaceKeyCompleted;
        
        /// <remarks/>
        public event AuthorizeRaceAccessCompletedEventHandler AuthorizeRaceAccessCompleted;
        
        /// <remarks/>
        public event GetBrandSpecificTranslationStringsCompletedEventHandler GetBrandSpecificTranslationStringsCompleted;
        
        /// <remarks/>
        public event GetBrandSpecificTranslationStringsIOSCompletedEventHandler GetBrandSpecificTranslationStringsIOSCompleted;
        
        /// <remarks/>
        public event GetTrainingCompletedEventHandler GetTrainingCompleted;
        
        /// <remarks/>
        public event DeleteTrainingCompletedEventHandler DeleteTrainingCompleted;
        
        /// <remarks/>
        public event SaveTrainingCompletedEventHandler SaveTrainingCompleted;
        
        /// <remarks/>
        public event GetTotalNumberOfPointsCompletedEventHandler GetTotalNumberOfPointsCompleted;
        
        /// <remarks/>
        public event GetTrainingForCalendarCompletedEventHandler GetTrainingForCalendarCompleted;
        
        /// <remarks/>
        public event GetTrainingTypesCompletedEventHandler GetTrainingTypesCompleted;
        
        /// <remarks/>
        public event GetMostRecentTrainingInTeamCompletedEventHandler GetMostRecentTrainingInTeamCompleted;
        
        /// <remarks/>
        public event SaveDailyActivityScoresCompletedEventHandler SaveDailyActivityScoresCompleted;
        
        /// <remarks/>
        public event GetHighscores_BestSubTeamsCompletedEventHandler GetHighscores_BestSubTeamsCompleted;
        
        /// <remarks/>
        public event GetHighscores_BestPersonsInTeamCompletedEventHandler GetHighscores_BestPersonsInTeamCompleted;
        
        /// <remarks/>
        public event GetRisingStarOfTheWeekCompletedEventHandler GetRisingStarOfTheWeekCompleted;
        
        /// <remarks/>
        public event GetHighscores_BestPersonsInMyListCompletedEventHandler GetHighscores_BestPersonsInMyListCompleted;
        
        /// <remarks/>
        public event IsMyFriendCompletedEventHandler IsMyFriendCompleted;
        
        /// <remarks/>
        public event GetMyFriendsCompletedEventHandler GetMyFriendsCompleted;
        
        /// <remarks/>
        public event RemoveFriendCompletedEventHandler RemoveFriendCompleted;
        
        /// <remarks/>
        public event AddFriendsCompletedEventHandler AddFriendsCompleted;
        
        /// <remarks/>
        public event GetMostRecentTeamActivityCompletedEventHandler GetMostRecentTeamActivityCompleted;
        
        /// <remarks/>
        public event GetAllPersonsOfTheTeamCompletedEventHandler GetAllPersonsOfTheTeamCompleted;
        
        /// <remarks/>
        public event GetTeamInfoCompletedEventHandler GetTeamInfoCompleted;
        
        /// <remarks/>
        public event UpdateTeamCompletedEventHandler UpdateTeamCompleted;
        
        /// <remarks/>
        public event GetTeamsByRaceIDCompletedEventHandler GetTeamsByRaceIDCompleted;
        
        /// <remarks/>
        public event CheckIfPersonIsManagerOfTeamCompletedEventHandler CheckIfPersonIsManagerOfTeamCompleted;
        
        /// <remarks/>
        public event GetTeamsPersonIsAManagerOfCompletedEventHandler GetTeamsPersonIsAManagerOfCompleted;
        
        /// <remarks/>
        public event GetTeamsPersonIsAMemberOfCompletedEventHandler GetTeamsPersonIsAMemberOfCompleted;
        
        /// <remarks/>
        public event GetMyTeamsCompletedEventHandler GetMyTeamsCompleted;
        
        /// <remarks/>
        public event UpdateTeamPictureURLCompletedEventHandler UpdateTeamPictureURLCompleted;
        
        /// <remarks/>
        public event GetNumberOfUnreadPersonalMessagesCompletedEventHandler GetNumberOfUnreadPersonalMessagesCompleted;
        
        /// <remarks/>
        public event MarkPersonalMessagesAsReadCompletedEventHandler MarkPersonalMessagesAsReadCompleted;
        
        /// <remarks/>
        public event MarkOrUnmarkPersonalMessageAsReadCompletedEventHandler MarkOrUnmarkPersonalMessageAsReadCompleted;
        
        /// <remarks/>
        public event ArchivePersonalMessageCompletedEventHandler ArchivePersonalMessageCompleted;
        
        /// <remarks/>
        public event GetPersonalMessagesCompletedEventHandler GetPersonalMessagesCompleted;
        
        /// <remarks/>
        public event GetSentPersonalMessagesCompletedEventHandler GetSentPersonalMessagesCompleted;
        
        /// <remarks/>
        public event SendPersonalMessageCompletedEventHandler SendPersonalMessageCompleted;
        
        /// <remarks/>
        public event DeletePersonalMessageCompletedEventHandler DeletePersonalMessageCompleted;
        
        /// <remarks/>
        public event CreateReplyToMessageCompletedEventHandler CreateReplyToMessageCompleted;
        
        /// <remarks/>
        public event GetThreadsCompletedEventHandler GetThreadsCompleted;
        
        /// <remarks/>
        public event GetPostingCompletedEventHandler GetPostingCompleted;
        
        /// <remarks/>
        public event SavePostingCompletedEventHandler SavePostingCompleted;
        
        /// <remarks/>
        public event MarkThreadAsReadCompletedEventHandler MarkThreadAsReadCompleted;
        
        /// <remarks/>
        public event GetThreadCompletedEventHandler GetThreadCompleted;
        
        /// <remarks/>
        public event GetPersonInfoCompletedEventHandler GetPersonInfoCompleted;
        
        /// <remarks/>
        public event SaveGoalCompletedEventHandler SaveGoalCompleted;
        
        /// <remarks/>
        public event GetGoalCompletedEventHandler GetGoalCompleted;
        
        /// <remarks/>
        public event DeleteGoalCompletedEventHandler DeleteGoalCompleted;
        
        /// <remarks/>
        public event GetGoalsCompletedEventHandler GetGoalsCompleted;
        
        /// <remarks/>
        public event GetGoalPeriodResultsCompletedEventHandler GetGoalPeriodResultsCompleted;
        
        /// <remarks/>
        public event ValidateUserNameCompletedEventHandler ValidateUserNameCompleted;
        
        /// <remarks/>
        public event ValidateEmailCompletedEventHandler ValidateEmailCompleted;
        
        /// <remarks/>
        public event GetRaceFromSignUpCodeCompletedEventHandler GetRaceFromSignUpCodeCompleted;
        
        /// <remarks/>
        public event UpdateMySettingsCompletedEventHandler UpdateMySettingsCompleted;
        
        /// <remarks/>
        public event AddPersonToTeamCompletedEventHandler AddPersonToTeamCompleted;
        
        /// <remarks/>
        public event GetRaceCompletedEventHandler GetRaceCompleted;
        
        /// <remarks/>
        public event UpdatePictureURLCompletedEventHandler UpdatePictureURLCompleted;
        
        /// <remarks/>
        public event GetMySettingsCompletedEventHandler GetMySettingsCompleted;
        
        /// <remarks/>
        public event GetParticipantOverviewCompletedEventHandler GetParticipantOverviewCompleted;
        
        /// <remarks/>
        public event TemplateCallHelloWorldCompletedEventHandler TemplateCallHelloWorldCompleted;
        
        /// <remarks/>
        public event ValidateAndCreateSecretCompletedEventHandler ValidateAndCreateSecretCompleted;
        
        /// <remarks/>
        public event ValidateAndCreateSecret_AlternateCompletedEventHandler ValidateAndCreateSecret_AlternateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetAvailableMedals", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedalResult[] GetAvailableMedals(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            object[] results = this.Invoke("GetAvailableMedals", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID});
            return ((MedalResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableMedalsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.GetAvailableMedalsAsync(applicationID, loginID, loginSecret, personID, raceID, null);
        }
        
        /// <remarks/>
        public void GetAvailableMedalsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, object userState) {
            if ((this.GetAvailableMedalsOperationCompleted == null)) {
                this.GetAvailableMedalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableMedalsOperationCompleted);
            }
            this.InvokeAsync("GetAvailableMedals", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID}, this.GetAvailableMedalsOperationCompleted, userState);
        }
        
        private void OnGetAvailableMedalsOperationCompleted(object arg) {
            if ((this.GetAvailableMedalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableMedalsCompleted(this, new GetAvailableMedalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetAvailableMedalsTranslated", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedalResult[] GetAvailableMedalsTranslated(string applicationID, string loginID, string loginSecret, int personID, int raceID, string cultureName) {
            object[] results = this.Invoke("GetAvailableMedalsTranslated", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID,
                        cultureName});
            return ((MedalResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableMedalsTranslatedAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, string cultureName) {
            this.GetAvailableMedalsTranslatedAsync(applicationID, loginID, loginSecret, personID, raceID, cultureName, null);
        }
        
        /// <remarks/>
        public void GetAvailableMedalsTranslatedAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, string cultureName, object userState) {
            if ((this.GetAvailableMedalsTranslatedOperationCompleted == null)) {
                this.GetAvailableMedalsTranslatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableMedalsTranslatedOperationCompleted);
            }
            this.InvokeAsync("GetAvailableMedalsTranslated", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID,
                        cultureName}, this.GetAvailableMedalsTranslatedOperationCompleted, userState);
        }
        
        private void OnGetAvailableMedalsTranslatedOperationCompleted(object arg) {
            if ((this.GetAvailableMedalsTranslatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableMedalsTranslatedCompleted(this, new GetAvailableMedalsTranslatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/EarnMedal", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedalResult EarnMedal(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID) {
            object[] results = this.Invoke("EarnMedal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        medalTypeID});
            return ((MedalResult)(results[0]));
        }
        
        /// <remarks/>
        public void EarnMedalAsync(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID) {
            this.EarnMedalAsync(applicationID, loginID, loginSecret, raceID, medalTypeID, null);
        }
        
        /// <remarks/>
        public void EarnMedalAsync(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID, object userState) {
            if ((this.EarnMedalOperationCompleted == null)) {
                this.EarnMedalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEarnMedalOperationCompleted);
            }
            this.InvokeAsync("EarnMedal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        medalTypeID}, this.EarnMedalOperationCompleted, userState);
        }
        
        private void OnEarnMedalOperationCompleted(object arg) {
            if ((this.EarnMedalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EarnMedalCompleted(this, new EarnMedalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/EarnMedalTranslated", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MedalResult EarnMedalTranslated(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID, string cultureName) {
            object[] results = this.Invoke("EarnMedalTranslated", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        medalTypeID,
                        cultureName});
            return ((MedalResult)(results[0]));
        }
        
        /// <remarks/>
        public void EarnMedalTranslatedAsync(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID, string cultureName) {
            this.EarnMedalTranslatedAsync(applicationID, loginID, loginSecret, raceID, medalTypeID, cultureName, null);
        }
        
        /// <remarks/>
        public void EarnMedalTranslatedAsync(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID, string cultureName, object userState) {
            if ((this.EarnMedalTranslatedOperationCompleted == null)) {
                this.EarnMedalTranslatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEarnMedalTranslatedOperationCompleted);
            }
            this.InvokeAsync("EarnMedalTranslated", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        medalTypeID,
                        cultureName}, this.EarnMedalTranslatedOperationCompleted, userState);
        }
        
        private void OnEarnMedalTranslatedOperationCompleted(object arg) {
            if ((this.EarnMedalTranslatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EarnMedalTranslatedCompleted(this, new EarnMedalTranslatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/UnearnMedal", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnearnMedal(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID) {
            this.Invoke("UnearnMedal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        medalTypeID});
        }
        
        /// <remarks/>
        public void UnearnMedalAsync(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID) {
            this.UnearnMedalAsync(applicationID, loginID, loginSecret, raceID, medalTypeID, null);
        }
        
        /// <remarks/>
        public void UnearnMedalAsync(string applicationID, string loginID, string loginSecret, int raceID, int medalTypeID, object userState) {
            if ((this.UnearnMedalOperationCompleted == null)) {
                this.UnearnMedalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnearnMedalOperationCompleted);
            }
            this.InvokeAsync("UnearnMedal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        medalTypeID}, this.UnearnMedalOperationCompleted, userState);
        }
        
        private void OnUnearnMedalOperationCompleted(object arg) {
            if ((this.UnearnMedalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnearnMedalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetNumberOfMedalsPerPerson", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NumberOfMedalsResult[] GetNumberOfMedalsPerPerson(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetNumberOfMedalsPerPerson", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((NumberOfMedalsResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNumberOfMedalsPerPersonAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetNumberOfMedalsPerPersonAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetNumberOfMedalsPerPersonAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetNumberOfMedalsPerPersonOperationCompleted == null)) {
                this.GetNumberOfMedalsPerPersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNumberOfMedalsPerPersonOperationCompleted);
            }
            this.InvokeAsync("GetNumberOfMedalsPerPerson", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetNumberOfMedalsPerPersonOperationCompleted, userState);
        }
        
        private void OnGetNumberOfMedalsPerPersonOperationCompleted(object arg) {
            if ((this.GetNumberOfMedalsPerPersonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNumberOfMedalsPerPersonCompleted(this, new GetNumberOfMedalsPerPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetMyNewsStream", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NewsStreamItem[] GetMyNewsStream(string applicationID, string loginID, string loginSecret, int raceID, byte maxNumberOfItems, string cultureName) {
            object[] results = this.Invoke("GetMyNewsStream", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        maxNumberOfItems,
                        cultureName});
            return ((NewsStreamItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyNewsStreamAsync(string applicationID, string loginID, string loginSecret, int raceID, byte maxNumberOfItems, string cultureName) {
            this.GetMyNewsStreamAsync(applicationID, loginID, loginSecret, raceID, maxNumberOfItems, cultureName, null);
        }
        
        /// <remarks/>
        public void GetMyNewsStreamAsync(string applicationID, string loginID, string loginSecret, int raceID, byte maxNumberOfItems, string cultureName, object userState) {
            if ((this.GetMyNewsStreamOperationCompleted == null)) {
                this.GetMyNewsStreamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyNewsStreamOperationCompleted);
            }
            this.InvokeAsync("GetMyNewsStream", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        maxNumberOfItems,
                        cultureName}, this.GetMyNewsStreamOperationCompleted, userState);
        }
        
        private void OnGetMyNewsStreamOperationCompleted(object arg) {
            if ((this.GetMyNewsStreamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyNewsStreamCompleted(this, new GetMyNewsStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTeamStream", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NewsStreamItem[] GetTeamStream(string applicationID, string loginID, string loginSecret, int teamID, byte maxNumberOfItems, string cultureName) {
            object[] results = this.Invoke("GetTeamStream", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID,
                        maxNumberOfItems,
                        cultureName});
            return ((NewsStreamItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamStreamAsync(string applicationID, string loginID, string loginSecret, int teamID, byte maxNumberOfItems, string cultureName) {
            this.GetTeamStreamAsync(applicationID, loginID, loginSecret, teamID, maxNumberOfItems, cultureName, null);
        }
        
        /// <remarks/>
        public void GetTeamStreamAsync(string applicationID, string loginID, string loginSecret, int teamID, byte maxNumberOfItems, string cultureName, object userState) {
            if ((this.GetTeamStreamOperationCompleted == null)) {
                this.GetTeamStreamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamStreamOperationCompleted);
            }
            this.InvokeAsync("GetTeamStream", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID,
                        maxNumberOfItems,
                        cultureName}, this.GetTeamStreamOperationCompleted, userState);
        }
        
        private void OnGetTeamStreamOperationCompleted(object arg) {
            if ((this.GetTeamStreamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamStreamCompleted(this, new GetTeamStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetWhatsGoingOn", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWhatsGoingOn() {
            object[] results = this.Invoke("GetWhatsGoingOn", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWhatsGoingOnAsync() {
            this.GetWhatsGoingOnAsync(null);
        }
        
        /// <remarks/>
        public void GetWhatsGoingOnAsync(object userState) {
            if ((this.GetWhatsGoingOnOperationCompleted == null)) {
                this.GetWhatsGoingOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWhatsGoingOnOperationCompleted);
            }
            this.InvokeAsync("GetWhatsGoingOn", new object[0], this.GetWhatsGoingOnOperationCompleted, userState);
        }
        
        private void OnGetWhatsGoingOnOperationCompleted(object arg) {
            if ((this.GetWhatsGoingOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWhatsGoingOnCompleted(this, new GetWhatsGoingOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetMyRanking", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMyRanking(int PersonID, int RaceID) {
            object[] results = this.Invoke("GetMyRanking", new object[] {
                        PersonID,
                        RaceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMyRankingAsync(int PersonID, int RaceID) {
            this.GetMyRankingAsync(PersonID, RaceID, null);
        }
        
        /// <remarks/>
        public void GetMyRankingAsync(int PersonID, int RaceID, object userState) {
            if ((this.GetMyRankingOperationCompleted == null)) {
                this.GetMyRankingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyRankingOperationCompleted);
            }
            this.InvokeAsync("GetMyRanking", new object[] {
                        PersonID,
                        RaceID}, this.GetMyRankingOperationCompleted, userState);
        }
        
        private void OnGetMyRankingOperationCompleted(object arg) {
            if ((this.GetMyRankingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyRankingCompleted(this, new GetMyRankingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetRacesAPersonCanLoginTo", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RaceAvailableForLoginResult[] GetRacesAPersonCanLoginTo(string applicationID, string loginID, string loginSecret, string hostName) {
            object[] results = this.Invoke("GetRacesAPersonCanLoginTo", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        hostName});
            return ((RaceAvailableForLoginResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRacesAPersonCanLoginToAsync(string applicationID, string loginID, string loginSecret, string hostName) {
            this.GetRacesAPersonCanLoginToAsync(applicationID, loginID, loginSecret, hostName, null);
        }
        
        /// <remarks/>
        public void GetRacesAPersonCanLoginToAsync(string applicationID, string loginID, string loginSecret, string hostName, object userState) {
            if ((this.GetRacesAPersonCanLoginToOperationCompleted == null)) {
                this.GetRacesAPersonCanLoginToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRacesAPersonCanLoginToOperationCompleted);
            }
            this.InvokeAsync("GetRacesAPersonCanLoginTo", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        hostName}, this.GetRacesAPersonCanLoginToOperationCompleted, userState);
        }
        
        private void OnGetRacesAPersonCanLoginToOperationCompleted(object arg) {
            if ((this.GetRacesAPersonCanLoginToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRacesAPersonCanLoginToCompleted(this, new GetRacesAPersonCanLoginToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetRacesAvailability", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RacesAvailabilityResult GetRacesAvailability(string applicationID, string loginID, string loginSecret) {
            object[] results = this.Invoke("GetRacesAvailability", new object[] {
                        applicationID,
                        loginID,
                        loginSecret});
            return ((RacesAvailabilityResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetRacesAvailabilityAsync(string applicationID, string loginID, string loginSecret) {
            this.GetRacesAvailabilityAsync(applicationID, loginID, loginSecret, null);
        }
        
        /// <remarks/>
        public void GetRacesAvailabilityAsync(string applicationID, string loginID, string loginSecret, object userState) {
            if ((this.GetRacesAvailabilityOperationCompleted == null)) {
                this.GetRacesAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRacesAvailabilityOperationCompleted);
            }
            this.InvokeAsync("GetRacesAvailability", new object[] {
                        applicationID,
                        loginID,
                        loginSecret}, this.GetRacesAvailabilityOperationCompleted, userState);
        }
        
        private void OnGetRacesAvailabilityOperationCompleted(object arg) {
            if ((this.GetRacesAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRacesAvailabilityCompleted(this, new GetRacesAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/AuthenticateLogin", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AuthenticationResult AuthenticateLogin(string applicationID, string loginID, string loginSecret, LoginDetails loginDetails) {
            object[] results = this.Invoke("AuthenticateLogin", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        loginDetails});
            return ((AuthenticationResult)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateLoginAsync(string applicationID, string loginID, string loginSecret, LoginDetails loginDetails) {
            this.AuthenticateLoginAsync(applicationID, loginID, loginSecret, loginDetails, null);
        }
        
        /// <remarks/>
        public void AuthenticateLoginAsync(string applicationID, string loginID, string loginSecret, LoginDetails loginDetails, object userState) {
            if ((this.AuthenticateLoginOperationCompleted == null)) {
                this.AuthenticateLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateLoginOperationCompleted);
            }
            this.InvokeAsync("AuthenticateLogin", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        loginDetails}, this.AuthenticateLoginOperationCompleted, userState);
        }
        
        private void OnAuthenticateLoginOperationCompleted(object arg) {
            if ((this.AuthenticateLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateLoginCompleted(this, new AuthenticateLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetRaceByRaceKey", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RaceDetailsResult GetRaceByRaceKey(string applicationID, string loginID, string loginSecret, string intranetSecretKey) {
            object[] results = this.Invoke("GetRaceByRaceKey", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        intranetSecretKey});
            return ((RaceDetailsResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetRaceByRaceKeyAsync(string applicationID, string loginID, string loginSecret, string intranetSecretKey) {
            this.GetRaceByRaceKeyAsync(applicationID, loginID, loginSecret, intranetSecretKey, null);
        }
        
        /// <remarks/>
        public void GetRaceByRaceKeyAsync(string applicationID, string loginID, string loginSecret, string intranetSecretKey, object userState) {
            if ((this.GetRaceByRaceKeyOperationCompleted == null)) {
                this.GetRaceByRaceKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRaceByRaceKeyOperationCompleted);
            }
            this.InvokeAsync("GetRaceByRaceKey", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        intranetSecretKey}, this.GetRaceByRaceKeyOperationCompleted, userState);
        }
        
        private void OnGetRaceByRaceKeyOperationCompleted(object arg) {
            if ((this.GetRaceByRaceKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRaceByRaceKeyCompleted(this, new GetRaceByRaceKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/AuthorizeRaceAccess", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RaceDetailsResult AuthorizeRaceAccess(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("AuthorizeRaceAccess", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((RaceDetailsResult)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeRaceAccessAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.AuthorizeRaceAccessAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void AuthorizeRaceAccessAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.AuthorizeRaceAccessOperationCompleted == null)) {
                this.AuthorizeRaceAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeRaceAccessOperationCompleted);
            }
            this.InvokeAsync("AuthorizeRaceAccess", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.AuthorizeRaceAccessOperationCompleted, userState);
        }
        
        private void OnAuthorizeRaceAccessOperationCompleted(object arg) {
            if ((this.AuthorizeRaceAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeRaceAccessCompleted(this, new AuthorizeRaceAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetBrandSpecificTranslationStri" +
            "ngs", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public KeyValuePairOfStringString[] GetBrandSpecificTranslationStrings(string applicationID, string loginID, string loginSecret, string cultureName, int raceID) {
            object[] results = this.Invoke("GetBrandSpecificTranslationStrings", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        raceID});
            return ((KeyValuePairOfStringString[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBrandSpecificTranslationStringsAsync(string applicationID, string loginID, string loginSecret, string cultureName, int raceID) {
            this.GetBrandSpecificTranslationStringsAsync(applicationID, loginID, loginSecret, cultureName, raceID, null);
        }
        
        /// <remarks/>
        public void GetBrandSpecificTranslationStringsAsync(string applicationID, string loginID, string loginSecret, string cultureName, int raceID, object userState) {
            if ((this.GetBrandSpecificTranslationStringsOperationCompleted == null)) {
                this.GetBrandSpecificTranslationStringsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrandSpecificTranslationStringsOperationCompleted);
            }
            this.InvokeAsync("GetBrandSpecificTranslationStrings", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        raceID}, this.GetBrandSpecificTranslationStringsOperationCompleted, userState);
        }
        
        private void OnGetBrandSpecificTranslationStringsOperationCompleted(object arg) {
            if ((this.GetBrandSpecificTranslationStringsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrandSpecificTranslationStringsCompleted(this, new GetBrandSpecificTranslationStringsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetBrandSpecificTranslationStri" +
            "ngsIOS", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetBrandSpecificTranslationStringsIOS(string applicationID, string loginID, string loginSecret, string cultureName, int raceID) {
            object[] results = this.Invoke("GetBrandSpecificTranslationStringsIOS", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        raceID});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBrandSpecificTranslationStringsIOSAsync(string applicationID, string loginID, string loginSecret, string cultureName, int raceID) {
            this.GetBrandSpecificTranslationStringsIOSAsync(applicationID, loginID, loginSecret, cultureName, raceID, null);
        }
        
        /// <remarks/>
        public void GetBrandSpecificTranslationStringsIOSAsync(string applicationID, string loginID, string loginSecret, string cultureName, int raceID, object userState) {
            if ((this.GetBrandSpecificTranslationStringsIOSOperationCompleted == null)) {
                this.GetBrandSpecificTranslationStringsIOSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrandSpecificTranslationStringsIOSOperationCompleted);
            }
            this.InvokeAsync("GetBrandSpecificTranslationStringsIOS", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        raceID}, this.GetBrandSpecificTranslationStringsIOSOperationCompleted, userState);
        }
        
        private void OnGetBrandSpecificTranslationStringsIOSOperationCompleted(object arg) {
            if ((this.GetBrandSpecificTranslationStringsIOSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrandSpecificTranslationStringsIOSCompleted(this, new GetBrandSpecificTranslationStringsIOSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTraining", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Training GetTraining(string applicationID, string loginID, string loginSecret, string cultureName, int trainingID, int raceID) {
            object[] results = this.Invoke("GetTraining", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        trainingID,
                        raceID});
            return ((Training)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrainingAsync(string applicationID, string loginID, string loginSecret, string cultureName, int trainingID, int raceID) {
            this.GetTrainingAsync(applicationID, loginID, loginSecret, cultureName, trainingID, raceID, null);
        }
        
        /// <remarks/>
        public void GetTrainingAsync(string applicationID, string loginID, string loginSecret, string cultureName, int trainingID, int raceID, object userState) {
            if ((this.GetTrainingOperationCompleted == null)) {
                this.GetTrainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrainingOperationCompleted);
            }
            this.InvokeAsync("GetTraining", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        trainingID,
                        raceID}, this.GetTrainingOperationCompleted, userState);
        }
        
        private void OnGetTrainingOperationCompleted(object arg) {
            if ((this.GetTrainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrainingCompleted(this, new GetTrainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/DeleteTraining", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTraining(string applicationID, string loginID, string loginSecret, int trainingID) {
            this.Invoke("DeleteTraining", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        trainingID});
        }
        
        /// <remarks/>
        public void DeleteTrainingAsync(string applicationID, string loginID, string loginSecret, int trainingID) {
            this.DeleteTrainingAsync(applicationID, loginID, loginSecret, trainingID, null);
        }
        
        /// <remarks/>
        public void DeleteTrainingAsync(string applicationID, string loginID, string loginSecret, int trainingID, object userState) {
            if ((this.DeleteTrainingOperationCompleted == null)) {
                this.DeleteTrainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTrainingOperationCompleted);
            }
            this.InvokeAsync("DeleteTraining", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        trainingID}, this.DeleteTrainingOperationCompleted, userState);
        }
        
        private void OnDeleteTrainingOperationCompleted(object arg) {
            if ((this.DeleteTrainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTrainingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/SaveTraining", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SaveTraining(string applicationID, string loginID, string loginSecret, Training training) {
            object[] results = this.Invoke("SaveTraining", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        training});
            return ((System.Nullable<int>)(results[0]));
        }
        
        /// <remarks/>
        public void SaveTrainingAsync(string applicationID, string loginID, string loginSecret, Training training) {
            this.SaveTrainingAsync(applicationID, loginID, loginSecret, training, null);
        }
        
        /// <remarks/>
        public void SaveTrainingAsync(string applicationID, string loginID, string loginSecret, Training training, object userState) {
            if ((this.SaveTrainingOperationCompleted == null)) {
                this.SaveTrainingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTrainingOperationCompleted);
            }
            this.InvokeAsync("SaveTraining", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        training}, this.SaveTrainingOperationCompleted, userState);
        }
        
        private void OnSaveTrainingOperationCompleted(object arg) {
            if ((this.SaveTrainingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTrainingCompleted(this, new SaveTrainingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTotalNumberOfPoints", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTotalNumberOfPoints(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            object[] results = this.Invoke("GetTotalNumberOfPoints", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalNumberOfPointsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.GetTotalNumberOfPointsAsync(applicationID, loginID, loginSecret, personID, raceID, null);
        }
        
        /// <remarks/>
        public void GetTotalNumberOfPointsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, object userState) {
            if ((this.GetTotalNumberOfPointsOperationCompleted == null)) {
                this.GetTotalNumberOfPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalNumberOfPointsOperationCompleted);
            }
            this.InvokeAsync("GetTotalNumberOfPoints", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID}, this.GetTotalNumberOfPointsOperationCompleted, userState);
        }
        
        private void OnGetTotalNumberOfPointsOperationCompleted(object arg) {
            if ((this.GetTotalNumberOfPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalNumberOfPointsCompleted(this, new GetTotalNumberOfPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTrainingForCalendar", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrainingBriefInfoResult[] GetTrainingForCalendar(string applicationID, string loginID, string loginSecret, string cultureName, int personID, int raceID, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetTrainingForCalendar", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        personID,
                        raceID,
                        startDate,
                        endDate});
            return ((TrainingBriefInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTrainingForCalendarAsync(string applicationID, string loginID, string loginSecret, string cultureName, int personID, int raceID, System.DateTime startDate, System.DateTime endDate) {
            this.GetTrainingForCalendarAsync(applicationID, loginID, loginSecret, cultureName, personID, raceID, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetTrainingForCalendarAsync(string applicationID, string loginID, string loginSecret, string cultureName, int personID, int raceID, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.GetTrainingForCalendarOperationCompleted == null)) {
                this.GetTrainingForCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrainingForCalendarOperationCompleted);
            }
            this.InvokeAsync("GetTrainingForCalendar", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        personID,
                        raceID,
                        startDate,
                        endDate}, this.GetTrainingForCalendarOperationCompleted, userState);
        }
        
        private void OnGetTrainingForCalendarOperationCompleted(object arg) {
            if ((this.GetTrainingForCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrainingForCalendarCompleted(this, new GetTrainingForCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTrainingTypes", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrainingType[] GetTrainingTypes(string applicationID, string loginID, string loginSecret, string cultureName, int raceID) {
            object[] results = this.Invoke("GetTrainingTypes", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        raceID});
            return ((TrainingType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTrainingTypesAsync(string applicationID, string loginID, string loginSecret, string cultureName, int raceID) {
            this.GetTrainingTypesAsync(applicationID, loginID, loginSecret, cultureName, raceID, null);
        }
        
        /// <remarks/>
        public void GetTrainingTypesAsync(string applicationID, string loginID, string loginSecret, string cultureName, int raceID, object userState) {
            if ((this.GetTrainingTypesOperationCompleted == null)) {
                this.GetTrainingTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrainingTypesOperationCompleted);
            }
            this.InvokeAsync("GetTrainingTypes", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        raceID}, this.GetTrainingTypesOperationCompleted, userState);
        }
        
        private void OnGetTrainingTypesOperationCompleted(object arg) {
            if ((this.GetTrainingTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrainingTypesCompleted(this, new GetTrainingTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetMostRecentTrainingInTeam", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrainingAndPersonBriefInfoResult[] GetMostRecentTrainingInTeam(string applicationID, string loginID, string loginSecret, string cultureName, int teamID, int numberOfItems) {
            object[] results = this.Invoke("GetMostRecentTrainingInTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        teamID,
                        numberOfItems});
            return ((TrainingAndPersonBriefInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMostRecentTrainingInTeamAsync(string applicationID, string loginID, string loginSecret, string cultureName, int teamID, int numberOfItems) {
            this.GetMostRecentTrainingInTeamAsync(applicationID, loginID, loginSecret, cultureName, teamID, numberOfItems, null);
        }
        
        /// <remarks/>
        public void GetMostRecentTrainingInTeamAsync(string applicationID, string loginID, string loginSecret, string cultureName, int teamID, int numberOfItems, object userState) {
            if ((this.GetMostRecentTrainingInTeamOperationCompleted == null)) {
                this.GetMostRecentTrainingInTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMostRecentTrainingInTeamOperationCompleted);
            }
            this.InvokeAsync("GetMostRecentTrainingInTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        teamID,
                        numberOfItems}, this.GetMostRecentTrainingInTeamOperationCompleted, userState);
        }
        
        private void OnGetMostRecentTrainingInTeamOperationCompleted(object arg) {
            if ((this.GetMostRecentTrainingInTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMostRecentTrainingInTeamCompleted(this, new GetMostRecentTrainingInTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/SaveDailyActivityScores", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveDailyActivityScores(string applicationID, string loginID, string RaceID, string loginSecret, DailyActivityScore[] scores) {
            this.Invoke("SaveDailyActivityScores", new object[] {
                        applicationID,
                        loginID,
                        RaceID,
                        loginSecret,
                        scores});
        }
        
        /// <remarks/>
        public void SaveDailyActivityScoresAsync(string applicationID, string loginID, string RaceID, string loginSecret, DailyActivityScore[] scores) {
            this.SaveDailyActivityScoresAsync(applicationID, loginID, RaceID, loginSecret, scores, null);
        }
        
        /// <remarks/>
        public void SaveDailyActivityScoresAsync(string applicationID, string loginID, string RaceID, string loginSecret, DailyActivityScore[] scores, object userState) {
            if ((this.SaveDailyActivityScoresOperationCompleted == null)) {
                this.SaveDailyActivityScoresOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDailyActivityScoresOperationCompleted);
            }
            this.InvokeAsync("SaveDailyActivityScores", new object[] {
                        applicationID,
                        loginID,
                        RaceID,
                        loginSecret,
                        scores}, this.SaveDailyActivityScoresOperationCompleted, userState);
        }
        
        private void OnSaveDailyActivityScoresOperationCompleted(object arg) {
            if ((this.SaveDailyActivityScoresCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDailyActivityScoresCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetHighscores_BestSubTeams", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamScoreResult[] GetHighscores_BestSubTeams(string applicationID, string loginID, string loginSecret, int personID, int raceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> parentTeamID, bool filterByMaxTeamsPerListValue) {
            object[] results = this.Invoke("GetHighscores_BestSubTeams", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID,
                        parentTeamID,
                        filterByMaxTeamsPerListValue});
            return ((TeamScoreResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHighscores_BestSubTeamsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, System.Nullable<int> parentTeamID, bool filterByMaxTeamsPerListValue) {
            this.GetHighscores_BestSubTeamsAsync(applicationID, loginID, loginSecret, personID, raceID, parentTeamID, filterByMaxTeamsPerListValue, null);
        }
        
        /// <remarks/>
        public void GetHighscores_BestSubTeamsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, System.Nullable<int> parentTeamID, bool filterByMaxTeamsPerListValue, object userState) {
            if ((this.GetHighscores_BestSubTeamsOperationCompleted == null)) {
                this.GetHighscores_BestSubTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHighscores_BestSubTeamsOperationCompleted);
            }
            this.InvokeAsync("GetHighscores_BestSubTeams", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID,
                        parentTeamID,
                        filterByMaxTeamsPerListValue}, this.GetHighscores_BestSubTeamsOperationCompleted, userState);
        }
        
        private void OnGetHighscores_BestSubTeamsOperationCompleted(object arg) {
            if ((this.GetHighscores_BestSubTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHighscores_BestSubTeamsCompleted(this, new GetHighscores_BestSubTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetHighscores_BestPersonsInTeam" +
            "", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonScoreResult[] GetHighscores_BestPersonsInTeam(string applicationID, string loginID, string loginSecret, int teamID) {
            object[] results = this.Invoke("GetHighscores_BestPersonsInTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID});
            return ((PersonScoreResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHighscores_BestPersonsInTeamAsync(string applicationID, string loginID, string loginSecret, int teamID) {
            this.GetHighscores_BestPersonsInTeamAsync(applicationID, loginID, loginSecret, teamID, null);
        }
        
        /// <remarks/>
        public void GetHighscores_BestPersonsInTeamAsync(string applicationID, string loginID, string loginSecret, int teamID, object userState) {
            if ((this.GetHighscores_BestPersonsInTeamOperationCompleted == null)) {
                this.GetHighscores_BestPersonsInTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHighscores_BestPersonsInTeamOperationCompleted);
            }
            this.InvokeAsync("GetHighscores_BestPersonsInTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID}, this.GetHighscores_BestPersonsInTeamOperationCompleted, userState);
        }
        
        private void OnGetHighscores_BestPersonsInTeamOperationCompleted(object arg) {
            if ((this.GetHighscores_BestPersonsInTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHighscores_BestPersonsInTeamCompleted(this, new GetHighscores_BestPersonsInTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetRisingStarOfTheWeek", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonScoreResult GetRisingStarOfTheWeek(string applicationID, string loginID, string loginSecret, int raceId, System.DateTime todaysDateTime) {
            object[] results = this.Invoke("GetRisingStarOfTheWeek", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceId,
                        todaysDateTime});
            return ((PersonScoreResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetRisingStarOfTheWeekAsync(string applicationID, string loginID, string loginSecret, int raceId, System.DateTime todaysDateTime) {
            this.GetRisingStarOfTheWeekAsync(applicationID, loginID, loginSecret, raceId, todaysDateTime, null);
        }
        
        /// <remarks/>
        public void GetRisingStarOfTheWeekAsync(string applicationID, string loginID, string loginSecret, int raceId, System.DateTime todaysDateTime, object userState) {
            if ((this.GetRisingStarOfTheWeekOperationCompleted == null)) {
                this.GetRisingStarOfTheWeekOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRisingStarOfTheWeekOperationCompleted);
            }
            this.InvokeAsync("GetRisingStarOfTheWeek", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceId,
                        todaysDateTime}, this.GetRisingStarOfTheWeekOperationCompleted, userState);
        }
        
        private void OnGetRisingStarOfTheWeekOperationCompleted(object arg) {
            if ((this.GetRisingStarOfTheWeekCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRisingStarOfTheWeekCompleted(this, new GetRisingStarOfTheWeekCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetHighscores_BestPersonsInMyLi" +
            "st", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonScoreResult[] GetHighscores_BestPersonsInMyList(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetHighscores_BestPersonsInMyList", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((PersonScoreResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetHighscores_BestPersonsInMyListAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetHighscores_BestPersonsInMyListAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetHighscores_BestPersonsInMyListAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetHighscores_BestPersonsInMyListOperationCompleted == null)) {
                this.GetHighscores_BestPersonsInMyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHighscores_BestPersonsInMyListOperationCompleted);
            }
            this.InvokeAsync("GetHighscores_BestPersonsInMyList", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetHighscores_BestPersonsInMyListOperationCompleted, userState);
        }
        
        private void OnGetHighscores_BestPersonsInMyListOperationCompleted(object arg) {
            if ((this.GetHighscores_BestPersonsInMyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHighscores_BestPersonsInMyListCompleted(this, new GetHighscores_BestPersonsInMyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/IsMyFriend", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsMyFriend(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            object[] results = this.Invoke("IsMyFriend", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsMyFriendAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.IsMyFriendAsync(applicationID, loginID, loginSecret, personID, raceID, null);
        }
        
        /// <remarks/>
        public void IsMyFriendAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, object userState) {
            if ((this.IsMyFriendOperationCompleted == null)) {
                this.IsMyFriendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsMyFriendOperationCompleted);
            }
            this.InvokeAsync("IsMyFriend", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID}, this.IsMyFriendOperationCompleted, userState);
        }
        
        private void OnIsMyFriendOperationCompleted(object arg) {
            if ((this.IsMyFriendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsMyFriendCompleted(this, new IsMyFriendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetMyFriends", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonBriefInfoResult[] GetMyFriends(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetMyFriends", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((PersonBriefInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyFriendsAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetMyFriendsAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetMyFriendsAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetMyFriendsOperationCompleted == null)) {
                this.GetMyFriendsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyFriendsOperationCompleted);
            }
            this.InvokeAsync("GetMyFriends", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetMyFriendsOperationCompleted, userState);
        }
        
        private void OnGetMyFriendsOperationCompleted(object arg) {
            if ((this.GetMyFriendsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyFriendsCompleted(this, new GetMyFriendsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/RemoveFriend", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveFriend(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.Invoke("RemoveFriend", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID});
        }
        
        /// <remarks/>
        public void RemoveFriendAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.RemoveFriendAsync(applicationID, loginID, loginSecret, personID, raceID, null);
        }
        
        /// <remarks/>
        public void RemoveFriendAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, object userState) {
            if ((this.RemoveFriendOperationCompleted == null)) {
                this.RemoveFriendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveFriendOperationCompleted);
            }
            this.InvokeAsync("RemoveFriend", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID}, this.RemoveFriendOperationCompleted, userState);
        }
        
        private void OnRemoveFriendOperationCompleted(object arg) {
            if ((this.RemoveFriendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveFriendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/AddFriends", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddFriends(string applicationID, string loginID, string loginSecret, int raceID, int[] personIDs) {
            object[] results = this.Invoke("AddFriends", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        personIDs});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddFriendsAsync(string applicationID, string loginID, string loginSecret, int raceID, int[] personIDs) {
            this.AddFriendsAsync(applicationID, loginID, loginSecret, raceID, personIDs, null);
        }
        
        /// <remarks/>
        public void AddFriendsAsync(string applicationID, string loginID, string loginSecret, int raceID, int[] personIDs, object userState) {
            if ((this.AddFriendsOperationCompleted == null)) {
                this.AddFriendsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFriendsOperationCompleted);
            }
            this.InvokeAsync("AddFriends", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        personIDs}, this.AddFriendsOperationCompleted, userState);
        }
        
        private void OnAddFriendsOperationCompleted(object arg) {
            if ((this.AddFriendsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFriendsCompleted(this, new AddFriendsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetMostRecentTeamActivity", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ActivityStream[] GetMostRecentTeamActivity(string applicationID, string loginID, string loginSecret, int maxNumberOfItems, int teamID, string cultureName) {
            object[] results = this.Invoke("GetMostRecentTeamActivity", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        maxNumberOfItems,
                        teamID,
                        cultureName});
            return ((ActivityStream[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMostRecentTeamActivityAsync(string applicationID, string loginID, string loginSecret, int maxNumberOfItems, int teamID, string cultureName) {
            this.GetMostRecentTeamActivityAsync(applicationID, loginID, loginSecret, maxNumberOfItems, teamID, cultureName, null);
        }
        
        /// <remarks/>
        public void GetMostRecentTeamActivityAsync(string applicationID, string loginID, string loginSecret, int maxNumberOfItems, int teamID, string cultureName, object userState) {
            if ((this.GetMostRecentTeamActivityOperationCompleted == null)) {
                this.GetMostRecentTeamActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMostRecentTeamActivityOperationCompleted);
            }
            this.InvokeAsync("GetMostRecentTeamActivity", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        maxNumberOfItems,
                        teamID,
                        cultureName}, this.GetMostRecentTeamActivityOperationCompleted, userState);
        }
        
        private void OnGetMostRecentTeamActivityOperationCompleted(object arg) {
            if ((this.GetMostRecentTeamActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMostRecentTeamActivityCompleted(this, new GetMostRecentTeamActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetAllPersonsOfTheTeam", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonBriefInfoResult[] GetAllPersonsOfTheTeam(string applicationID, string loginID, string loginSecret, int teamID) {
            object[] results = this.Invoke("GetAllPersonsOfTheTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID});
            return ((PersonBriefInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPersonsOfTheTeamAsync(string applicationID, string loginID, string loginSecret, int teamID) {
            this.GetAllPersonsOfTheTeamAsync(applicationID, loginID, loginSecret, teamID, null);
        }
        
        /// <remarks/>
        public void GetAllPersonsOfTheTeamAsync(string applicationID, string loginID, string loginSecret, int teamID, object userState) {
            if ((this.GetAllPersonsOfTheTeamOperationCompleted == null)) {
                this.GetAllPersonsOfTheTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPersonsOfTheTeamOperationCompleted);
            }
            this.InvokeAsync("GetAllPersonsOfTheTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID}, this.GetAllPersonsOfTheTeamOperationCompleted, userState);
        }
        
        private void OnGetAllPersonsOfTheTeamOperationCompleted(object arg) {
            if ((this.GetAllPersonsOfTheTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPersonsOfTheTeamCompleted(this, new GetAllPersonsOfTheTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTeamInfo", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamInfoResult GetTeamInfo(string applicationID, string loginID, string loginSecret, int teamID) {
            object[] results = this.Invoke("GetTeamInfo", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID});
            return ((TeamInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamInfoAsync(string applicationID, string loginID, string loginSecret, int teamID) {
            this.GetTeamInfoAsync(applicationID, loginID, loginSecret, teamID, null);
        }
        
        /// <remarks/>
        public void GetTeamInfoAsync(string applicationID, string loginID, string loginSecret, int teamID, object userState) {
            if ((this.GetTeamInfoOperationCompleted == null)) {
                this.GetTeamInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamInfoOperationCompleted);
            }
            this.InvokeAsync("GetTeamInfo", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID}, this.GetTeamInfoOperationCompleted, userState);
        }
        
        private void OnGetTeamInfoOperationCompleted(object arg) {
            if ((this.GetTeamInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamInfoCompleted(this, new GetTeamInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/UpdateTeam", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTeam(string applicationID, string loginID, string loginSecret, TeamInfoResult teamInfoResult) {
            this.Invoke("UpdateTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamInfoResult});
        }
        
        /// <remarks/>
        public void UpdateTeamAsync(string applicationID, string loginID, string loginSecret, TeamInfoResult teamInfoResult) {
            this.UpdateTeamAsync(applicationID, loginID, loginSecret, teamInfoResult, null);
        }
        
        /// <remarks/>
        public void UpdateTeamAsync(string applicationID, string loginID, string loginSecret, TeamInfoResult teamInfoResult, object userState) {
            if ((this.UpdateTeamOperationCompleted == null)) {
                this.UpdateTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTeamOperationCompleted);
            }
            this.InvokeAsync("UpdateTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamInfoResult}, this.UpdateTeamOperationCompleted, userState);
        }
        
        private void OnUpdateTeamOperationCompleted(object arg) {
            if ((this.UpdateTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTeamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTeamsByRaceID", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamInfoResult[] GetTeamsByRaceID(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetTeamsByRaceID", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((TeamInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamsByRaceIDAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetTeamsByRaceIDAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetTeamsByRaceIDAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetTeamsByRaceIDOperationCompleted == null)) {
                this.GetTeamsByRaceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamsByRaceIDOperationCompleted);
            }
            this.InvokeAsync("GetTeamsByRaceID", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetTeamsByRaceIDOperationCompleted, userState);
        }
        
        private void OnGetTeamsByRaceIDOperationCompleted(object arg) {
            if ((this.GetTeamsByRaceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamsByRaceIDCompleted(this, new GetTeamsByRaceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/CheckIfPersonIsManagerOfTeam", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIfPersonIsManagerOfTeam(string applicationID, string loginID, string loginSecret, int personID, int teamID) {
            object[] results = this.Invoke("CheckIfPersonIsManagerOfTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        teamID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIfPersonIsManagerOfTeamAsync(string applicationID, string loginID, string loginSecret, int personID, int teamID) {
            this.CheckIfPersonIsManagerOfTeamAsync(applicationID, loginID, loginSecret, personID, teamID, null);
        }
        
        /// <remarks/>
        public void CheckIfPersonIsManagerOfTeamAsync(string applicationID, string loginID, string loginSecret, int personID, int teamID, object userState) {
            if ((this.CheckIfPersonIsManagerOfTeamOperationCompleted == null)) {
                this.CheckIfPersonIsManagerOfTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfPersonIsManagerOfTeamOperationCompleted);
            }
            this.InvokeAsync("CheckIfPersonIsManagerOfTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        teamID}, this.CheckIfPersonIsManagerOfTeamOperationCompleted, userState);
        }
        
        private void OnCheckIfPersonIsManagerOfTeamOperationCompleted(object arg) {
            if ((this.CheckIfPersonIsManagerOfTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfPersonIsManagerOfTeamCompleted(this, new CheckIfPersonIsManagerOfTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTeamsPersonIsAManagerOf", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamInfoResult[] GetTeamsPersonIsAManagerOf(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            object[] results = this.Invoke("GetTeamsPersonIsAManagerOf", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID});
            return ((TeamInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamsPersonIsAManagerOfAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.GetTeamsPersonIsAManagerOfAsync(applicationID, loginID, loginSecret, personID, raceID, null);
        }
        
        /// <remarks/>
        public void GetTeamsPersonIsAManagerOfAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, object userState) {
            if ((this.GetTeamsPersonIsAManagerOfOperationCompleted == null)) {
                this.GetTeamsPersonIsAManagerOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamsPersonIsAManagerOfOperationCompleted);
            }
            this.InvokeAsync("GetTeamsPersonIsAManagerOf", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID}, this.GetTeamsPersonIsAManagerOfOperationCompleted, userState);
        }
        
        private void OnGetTeamsPersonIsAManagerOfOperationCompleted(object arg) {
            if ((this.GetTeamsPersonIsAManagerOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamsPersonIsAManagerOfCompleted(this, new GetTeamsPersonIsAManagerOfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetTeamsPersonIsAMemberOf", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamInfoResult[] GetTeamsPersonIsAMemberOf(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            object[] results = this.Invoke("GetTeamsPersonIsAMemberOf", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID});
            return ((TeamInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamsPersonIsAMemberOfAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.GetTeamsPersonIsAMemberOfAsync(applicationID, loginID, loginSecret, personID, raceID, null);
        }
        
        /// <remarks/>
        public void GetTeamsPersonIsAMemberOfAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, object userState) {
            if ((this.GetTeamsPersonIsAMemberOfOperationCompleted == null)) {
                this.GetTeamsPersonIsAMemberOfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamsPersonIsAMemberOfOperationCompleted);
            }
            this.InvokeAsync("GetTeamsPersonIsAMemberOf", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID}, this.GetTeamsPersonIsAMemberOfOperationCompleted, userState);
        }
        
        private void OnGetTeamsPersonIsAMemberOfOperationCompleted(object arg) {
            if ((this.GetTeamsPersonIsAMemberOfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamsPersonIsAMemberOfCompleted(this, new GetTeamsPersonIsAMemberOfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetMyTeams", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TeamInfoResult[] GetMyTeams(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetMyTeams", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((TeamInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyTeamsAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetMyTeamsAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetMyTeamsAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetMyTeamsOperationCompleted == null)) {
                this.GetMyTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyTeamsOperationCompleted);
            }
            this.InvokeAsync("GetMyTeams", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetMyTeamsOperationCompleted, userState);
        }
        
        private void OnGetMyTeamsOperationCompleted(object arg) {
            if ((this.GetMyTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyTeamsCompleted(this, new GetMyTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/UpdateTeamPictureURL", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTeamPictureURL(string applicationID, string loginID, string loginSecret, int teamID, string pictureURL) {
            this.Invoke("UpdateTeamPictureURL", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID,
                        pictureURL});
        }
        
        /// <remarks/>
        public void UpdateTeamPictureURLAsync(string applicationID, string loginID, string loginSecret, int teamID, string pictureURL) {
            this.UpdateTeamPictureURLAsync(applicationID, loginID, loginSecret, teamID, pictureURL, null);
        }
        
        /// <remarks/>
        public void UpdateTeamPictureURLAsync(string applicationID, string loginID, string loginSecret, int teamID, string pictureURL, object userState) {
            if ((this.UpdateTeamPictureURLOperationCompleted == null)) {
                this.UpdateTeamPictureURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTeamPictureURLOperationCompleted);
            }
            this.InvokeAsync("UpdateTeamPictureURL", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        teamID,
                        pictureURL}, this.UpdateTeamPictureURLOperationCompleted, userState);
        }
        
        private void OnUpdateTeamPictureURLOperationCompleted(object arg) {
            if ((this.UpdateTeamPictureURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTeamPictureURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetNumberOfUnreadPersonalMessag" +
            "es", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNumberOfUnreadPersonalMessages(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetNumberOfUnreadPersonalMessages", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNumberOfUnreadPersonalMessagesAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetNumberOfUnreadPersonalMessagesAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetNumberOfUnreadPersonalMessagesAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetNumberOfUnreadPersonalMessagesOperationCompleted == null)) {
                this.GetNumberOfUnreadPersonalMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNumberOfUnreadPersonalMessagesOperationCompleted);
            }
            this.InvokeAsync("GetNumberOfUnreadPersonalMessages", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetNumberOfUnreadPersonalMessagesOperationCompleted, userState);
        }
        
        private void OnGetNumberOfUnreadPersonalMessagesOperationCompleted(object arg) {
            if ((this.GetNumberOfUnreadPersonalMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNumberOfUnreadPersonalMessagesCompleted(this, new GetNumberOfUnreadPersonalMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/MarkPersonalMessagesAsRead", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkPersonalMessagesAsRead(string applicationID, string loginID, string loginSecret, int lastReadPersonalMessageID) {
            this.Invoke("MarkPersonalMessagesAsRead", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        lastReadPersonalMessageID});
        }
        
        /// <remarks/>
        public void MarkPersonalMessagesAsReadAsync(string applicationID, string loginID, string loginSecret, int lastReadPersonalMessageID) {
            this.MarkPersonalMessagesAsReadAsync(applicationID, loginID, loginSecret, lastReadPersonalMessageID, null);
        }
        
        /// <remarks/>
        public void MarkPersonalMessagesAsReadAsync(string applicationID, string loginID, string loginSecret, int lastReadPersonalMessageID, object userState) {
            if ((this.MarkPersonalMessagesAsReadOperationCompleted == null)) {
                this.MarkPersonalMessagesAsReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkPersonalMessagesAsReadOperationCompleted);
            }
            this.InvokeAsync("MarkPersonalMessagesAsRead", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        lastReadPersonalMessageID}, this.MarkPersonalMessagesAsReadOperationCompleted, userState);
        }
        
        private void OnMarkPersonalMessagesAsReadOperationCompleted(object arg) {
            if ((this.MarkPersonalMessagesAsReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkPersonalMessagesAsReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/MarkOrUnmarkPersonalMessageAsRe" +
            "ad", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkOrUnmarkPersonalMessageAsRead(string applicationID, string loginID, string loginSecret, int personalMessageID, bool isRead) {
            this.Invoke("MarkOrUnmarkPersonalMessageAsRead", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID,
                        isRead});
        }
        
        /// <remarks/>
        public void MarkOrUnmarkPersonalMessageAsReadAsync(string applicationID, string loginID, string loginSecret, int personalMessageID, bool isRead) {
            this.MarkOrUnmarkPersonalMessageAsReadAsync(applicationID, loginID, loginSecret, personalMessageID, isRead, null);
        }
        
        /// <remarks/>
        public void MarkOrUnmarkPersonalMessageAsReadAsync(string applicationID, string loginID, string loginSecret, int personalMessageID, bool isRead, object userState) {
            if ((this.MarkOrUnmarkPersonalMessageAsReadOperationCompleted == null)) {
                this.MarkOrUnmarkPersonalMessageAsReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkOrUnmarkPersonalMessageAsReadOperationCompleted);
            }
            this.InvokeAsync("MarkOrUnmarkPersonalMessageAsRead", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID,
                        isRead}, this.MarkOrUnmarkPersonalMessageAsReadOperationCompleted, userState);
        }
        
        private void OnMarkOrUnmarkPersonalMessageAsReadOperationCompleted(object arg) {
            if ((this.MarkOrUnmarkPersonalMessageAsReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkOrUnmarkPersonalMessageAsReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/ArchivePersonalMessage", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ArchivePersonalMessage(string applicationID, string loginID, string loginSecret, int personalMessageID) {
            this.Invoke("ArchivePersonalMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID});
        }
        
        /// <remarks/>
        public void ArchivePersonalMessageAsync(string applicationID, string loginID, string loginSecret, int personalMessageID) {
            this.ArchivePersonalMessageAsync(applicationID, loginID, loginSecret, personalMessageID, null);
        }
        
        /// <remarks/>
        public void ArchivePersonalMessageAsync(string applicationID, string loginID, string loginSecret, int personalMessageID, object userState) {
            if ((this.ArchivePersonalMessageOperationCompleted == null)) {
                this.ArchivePersonalMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchivePersonalMessageOperationCompleted);
            }
            this.InvokeAsync("ArchivePersonalMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID}, this.ArchivePersonalMessageOperationCompleted, userState);
        }
        
        private void OnArchivePersonalMessageOperationCompleted(object arg) {
            if ((this.ArchivePersonalMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchivePersonalMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetPersonalMessages", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonalMessageInfoResult[] GetPersonalMessages(string applicationID, string loginID, string loginSecret, int pageNumber, int pageSize, bool archive, bool getOnlyPublicMessages, int raceID) {
            object[] results = this.Invoke("GetPersonalMessages", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        pageNumber,
                        pageSize,
                        archive,
                        getOnlyPublicMessages,
                        raceID});
            return ((PersonalMessageInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPersonalMessagesAsync(string applicationID, string loginID, string loginSecret, int pageNumber, int pageSize, bool archive, bool getOnlyPublicMessages, int raceID) {
            this.GetPersonalMessagesAsync(applicationID, loginID, loginSecret, pageNumber, pageSize, archive, getOnlyPublicMessages, raceID, null);
        }
        
        /// <remarks/>
        public void GetPersonalMessagesAsync(string applicationID, string loginID, string loginSecret, int pageNumber, int pageSize, bool archive, bool getOnlyPublicMessages, int raceID, object userState) {
            if ((this.GetPersonalMessagesOperationCompleted == null)) {
                this.GetPersonalMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPersonalMessagesOperationCompleted);
            }
            this.InvokeAsync("GetPersonalMessages", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        pageNumber,
                        pageSize,
                        archive,
                        getOnlyPublicMessages,
                        raceID}, this.GetPersonalMessagesOperationCompleted, userState);
        }
        
        private void OnGetPersonalMessagesOperationCompleted(object arg) {
            if ((this.GetPersonalMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPersonalMessagesCompleted(this, new GetPersonalMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetSentPersonalMessages", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonalMessageInfoResult[] GetSentPersonalMessages(string applicationID, string loginID, string loginSecret, int pageNumber, int pageSize, int raceID) {
            object[] results = this.Invoke("GetSentPersonalMessages", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        pageNumber,
                        pageSize,
                        raceID});
            return ((PersonalMessageInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSentPersonalMessagesAsync(string applicationID, string loginID, string loginSecret, int pageNumber, int pageSize, int raceID) {
            this.GetSentPersonalMessagesAsync(applicationID, loginID, loginSecret, pageNumber, pageSize, raceID, null);
        }
        
        /// <remarks/>
        public void GetSentPersonalMessagesAsync(string applicationID, string loginID, string loginSecret, int pageNumber, int pageSize, int raceID, object userState) {
            if ((this.GetSentPersonalMessagesOperationCompleted == null)) {
                this.GetSentPersonalMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSentPersonalMessagesOperationCompleted);
            }
            this.InvokeAsync("GetSentPersonalMessages", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        pageNumber,
                        pageSize,
                        raceID}, this.GetSentPersonalMessagesOperationCompleted, userState);
        }
        
        private void OnGetSentPersonalMessagesOperationCompleted(object arg) {
            if ((this.GetSentPersonalMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSentPersonalMessagesCompleted(this, new GetSentPersonalMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/SendPersonalMessage", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendPersonalMessage(string applicationID, string loginID, string loginSecret, int raceID, int toPersonID, string messageText, bool isPublic) {
            this.Invoke("SendPersonalMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        toPersonID,
                        messageText,
                        isPublic});
        }
        
        /// <remarks/>
        public void SendPersonalMessageAsync(string applicationID, string loginID, string loginSecret, int raceID, int toPersonID, string messageText, bool isPublic) {
            this.SendPersonalMessageAsync(applicationID, loginID, loginSecret, raceID, toPersonID, messageText, isPublic, null);
        }
        
        /// <remarks/>
        public void SendPersonalMessageAsync(string applicationID, string loginID, string loginSecret, int raceID, int toPersonID, string messageText, bool isPublic, object userState) {
            if ((this.SendPersonalMessageOperationCompleted == null)) {
                this.SendPersonalMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPersonalMessageOperationCompleted);
            }
            this.InvokeAsync("SendPersonalMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        toPersonID,
                        messageText,
                        isPublic}, this.SendPersonalMessageOperationCompleted, userState);
        }
        
        private void OnSendPersonalMessageOperationCompleted(object arg) {
            if ((this.SendPersonalMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPersonalMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/DeletePersonalMessage", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePersonalMessage(string applicationID, string loginID, string loginSecret, int personalMessageID) {
            this.Invoke("DeletePersonalMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID});
        }
        
        /// <remarks/>
        public void DeletePersonalMessageAsync(string applicationID, string loginID, string loginSecret, int personalMessageID) {
            this.DeletePersonalMessageAsync(applicationID, loginID, loginSecret, personalMessageID, null);
        }
        
        /// <remarks/>
        public void DeletePersonalMessageAsync(string applicationID, string loginID, string loginSecret, int personalMessageID, object userState) {
            if ((this.DeletePersonalMessageOperationCompleted == null)) {
                this.DeletePersonalMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePersonalMessageOperationCompleted);
            }
            this.InvokeAsync("DeletePersonalMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID}, this.DeletePersonalMessageOperationCompleted, userState);
        }
        
        private void OnDeletePersonalMessageOperationCompleted(object arg) {
            if ((this.DeletePersonalMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePersonalMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/CreateReplyToMessage", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateReplyToMessage(string applicationID, string loginID, string loginSecret, int personalMessageID, int columnWidth) {
            object[] results = this.Invoke("CreateReplyToMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID,
                        columnWidth});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateReplyToMessageAsync(string applicationID, string loginID, string loginSecret, int personalMessageID, int columnWidth) {
            this.CreateReplyToMessageAsync(applicationID, loginID, loginSecret, personalMessageID, columnWidth, null);
        }
        
        /// <remarks/>
        public void CreateReplyToMessageAsync(string applicationID, string loginID, string loginSecret, int personalMessageID, int columnWidth, object userState) {
            if ((this.CreateReplyToMessageOperationCompleted == null)) {
                this.CreateReplyToMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateReplyToMessageOperationCompleted);
            }
            this.InvokeAsync("CreateReplyToMessage", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personalMessageID,
                        columnWidth}, this.CreateReplyToMessageOperationCompleted, userState);
        }
        
        private void OnCreateReplyToMessageOperationCompleted(object arg) {
            if ((this.CreateReplyToMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateReplyToMessageCompleted(this, new CreateReplyToMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetThreads", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ThreadInfoResult[] GetThreads(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetThreads", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((ThreadInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetThreadsAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetThreadsAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetThreadsAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetThreadsOperationCompleted == null)) {
                this.GetThreadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThreadsOperationCompleted);
            }
            this.InvokeAsync("GetThreads", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetThreadsOperationCompleted, userState);
        }
        
        private void OnGetThreadsOperationCompleted(object arg) {
            if ((this.GetThreadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThreadsCompleted(this, new GetThreadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetPosting", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Posting GetPosting(string applicationID, string loginID, string loginSecret, int raceID, int postingID) {
            object[] results = this.Invoke("GetPosting", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        postingID});
            return ((Posting)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostingAsync(string applicationID, string loginID, string loginSecret, int raceID, int postingID) {
            this.GetPostingAsync(applicationID, loginID, loginSecret, raceID, postingID, null);
        }
        
        /// <remarks/>
        public void GetPostingAsync(string applicationID, string loginID, string loginSecret, int raceID, int postingID, object userState) {
            if ((this.GetPostingOperationCompleted == null)) {
                this.GetPostingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostingOperationCompleted);
            }
            this.InvokeAsync("GetPosting", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        postingID}, this.GetPostingOperationCompleted, userState);
        }
        
        private void OnGetPostingOperationCompleted(object arg) {
            if ((this.GetPostingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostingCompleted(this, new GetPostingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/SavePosting", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SavePosting(string applicationID, string loginID, string loginSecret, Posting posting) {
            object[] results = this.Invoke("SavePosting", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        posting});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SavePostingAsync(string applicationID, string loginID, string loginSecret, Posting posting) {
            this.SavePostingAsync(applicationID, loginID, loginSecret, posting, null);
        }
        
        /// <remarks/>
        public void SavePostingAsync(string applicationID, string loginID, string loginSecret, Posting posting, object userState) {
            if ((this.SavePostingOperationCompleted == null)) {
                this.SavePostingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePostingOperationCompleted);
            }
            this.InvokeAsync("SavePosting", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        posting}, this.SavePostingOperationCompleted, userState);
        }
        
        private void OnSavePostingOperationCompleted(object arg) {
            if ((this.SavePostingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePostingCompleted(this, new SavePostingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/MarkThreadAsRead", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkThreadAsRead(string applicationID, string loginID, string loginSecret, int raceID, int lastReadPostingID) {
            this.Invoke("MarkThreadAsRead", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        lastReadPostingID});
        }
        
        /// <remarks/>
        public void MarkThreadAsReadAsync(string applicationID, string loginID, string loginSecret, int raceID, int lastReadPostingID) {
            this.MarkThreadAsReadAsync(applicationID, loginID, loginSecret, raceID, lastReadPostingID, null);
        }
        
        /// <remarks/>
        public void MarkThreadAsReadAsync(string applicationID, string loginID, string loginSecret, int raceID, int lastReadPostingID, object userState) {
            if ((this.MarkThreadAsReadOperationCompleted == null)) {
                this.MarkThreadAsReadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkThreadAsReadOperationCompleted);
            }
            this.InvokeAsync("MarkThreadAsRead", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        lastReadPostingID}, this.MarkThreadAsReadOperationCompleted, userState);
        }
        
        private void OnMarkThreadAsReadOperationCompleted(object arg) {
            if ((this.MarkThreadAsReadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkThreadAsReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetThread", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PostingInfoResult[] GetThread(string applicationID, string loginID, string loginSecret, int raceID, int threadID) {
            object[] results = this.Invoke("GetThread", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        threadID});
            return ((PostingInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetThreadAsync(string applicationID, string loginID, string loginSecret, int raceID, int threadID) {
            this.GetThreadAsync(applicationID, loginID, loginSecret, raceID, threadID, null);
        }
        
        /// <remarks/>
        public void GetThreadAsync(string applicationID, string loginID, string loginSecret, int raceID, int threadID, object userState) {
            if ((this.GetThreadOperationCompleted == null)) {
                this.GetThreadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThreadOperationCompleted);
            }
            this.InvokeAsync("GetThread", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        threadID}, this.GetThreadOperationCompleted, userState);
        }
        
        private void OnGetThreadOperationCompleted(object arg) {
            if ((this.GetThreadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThreadCompleted(this, new GetThreadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetPersonInfo", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonInfo GetPersonInfo(string applicationID, string loginID, string loginSecret, int raceID, int personID) {
            object[] results = this.Invoke("GetPersonInfo", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        personID});
            return ((PersonInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetPersonInfoAsync(string applicationID, string loginID, string loginSecret, int raceID, int personID) {
            this.GetPersonInfoAsync(applicationID, loginID, loginSecret, raceID, personID, null);
        }
        
        /// <remarks/>
        public void GetPersonInfoAsync(string applicationID, string loginID, string loginSecret, int raceID, int personID, object userState) {
            if ((this.GetPersonInfoOperationCompleted == null)) {
                this.GetPersonInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPersonInfoOperationCompleted);
            }
            this.InvokeAsync("GetPersonInfo", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID,
                        personID}, this.GetPersonInfoOperationCompleted, userState);
        }
        
        private void OnGetPersonInfoOperationCompleted(object arg) {
            if ((this.GetPersonInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPersonInfoCompleted(this, new GetPersonInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/SaveGoal", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> SaveGoal(string applicationID, string loginID, string loginSecret, Goal goal) {
            object[] results = this.Invoke("SaveGoal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        goal});
            return ((System.Nullable<int>)(results[0]));
        }
        
        /// <remarks/>
        public void SaveGoalAsync(string applicationID, string loginID, string loginSecret, Goal goal) {
            this.SaveGoalAsync(applicationID, loginID, loginSecret, goal, null);
        }
        
        /// <remarks/>
        public void SaveGoalAsync(string applicationID, string loginID, string loginSecret, Goal goal, object userState) {
            if ((this.SaveGoalOperationCompleted == null)) {
                this.SaveGoalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveGoalOperationCompleted);
            }
            this.InvokeAsync("SaveGoal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        goal}, this.SaveGoalOperationCompleted, userState);
        }
        
        private void OnSaveGoalOperationCompleted(object arg) {
            if ((this.SaveGoalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveGoalCompleted(this, new SaveGoalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetGoal", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Goal GetGoal(string applicationID, string loginID, string loginSecret, string cultureName, int goalID, int raceID) {
            object[] results = this.Invoke("GetGoal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        goalID,
                        raceID});
            return ((Goal)(results[0]));
        }
        
        /// <remarks/>
        public void GetGoalAsync(string applicationID, string loginID, string loginSecret, string cultureName, int goalID, int raceID) {
            this.GetGoalAsync(applicationID, loginID, loginSecret, cultureName, goalID, raceID, null);
        }
        
        /// <remarks/>
        public void GetGoalAsync(string applicationID, string loginID, string loginSecret, string cultureName, int goalID, int raceID, object userState) {
            if ((this.GetGoalOperationCompleted == null)) {
                this.GetGoalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGoalOperationCompleted);
            }
            this.InvokeAsync("GetGoal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        cultureName,
                        goalID,
                        raceID}, this.GetGoalOperationCompleted, userState);
        }
        
        private void OnGetGoalOperationCompleted(object arg) {
            if ((this.GetGoalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGoalCompleted(this, new GetGoalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/DeleteGoal", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteGoal(string applicationID, string loginID, string loginSecret, int goalID, int raceID) {
            this.Invoke("DeleteGoal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        goalID,
                        raceID});
        }
        
        /// <remarks/>
        public void DeleteGoalAsync(string applicationID, string loginID, string loginSecret, int goalID, int raceID) {
            this.DeleteGoalAsync(applicationID, loginID, loginSecret, goalID, raceID, null);
        }
        
        /// <remarks/>
        public void DeleteGoalAsync(string applicationID, string loginID, string loginSecret, int goalID, int raceID, object userState) {
            if ((this.DeleteGoalOperationCompleted == null)) {
                this.DeleteGoalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGoalOperationCompleted);
            }
            this.InvokeAsync("DeleteGoal", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        goalID,
                        raceID}, this.DeleteGoalOperationCompleted, userState);
        }
        
        private void OnDeleteGoalOperationCompleted(object arg) {
            if ((this.DeleteGoalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGoalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetGoals", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GoalBriefInfoResult[] GetGoals(string applicationID, string loginID, string loginSecret, int personID, int raceID, bool getOnlyPublicGoals) {
            object[] results = this.Invoke("GetGoals", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID,
                        getOnlyPublicGoals});
            return ((GoalBriefInfoResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGoalsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, bool getOnlyPublicGoals) {
            this.GetGoalsAsync(applicationID, loginID, loginSecret, personID, raceID, getOnlyPublicGoals, null);
        }
        
        /// <remarks/>
        public void GetGoalsAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, bool getOnlyPublicGoals, object userState) {
            if ((this.GetGoalsOperationCompleted == null)) {
                this.GetGoalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGoalsOperationCompleted);
            }
            this.InvokeAsync("GetGoals", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID,
                        getOnlyPublicGoals}, this.GetGoalsOperationCompleted, userState);
        }
        
        private void OnGetGoalsOperationCompleted(object arg) {
            if ((this.GetGoalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGoalsCompleted(this, new GetGoalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetGoalPeriodResults", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GoalPeriodResult[] GetGoalPeriodResults(string applicationID, string loginID, string loginSecret, int goalID, int raceID) {
            object[] results = this.Invoke("GetGoalPeriodResults", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        goalID,
                        raceID});
            return ((GoalPeriodResult[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGoalPeriodResultsAsync(string applicationID, string loginID, string loginSecret, int goalID, int raceID) {
            this.GetGoalPeriodResultsAsync(applicationID, loginID, loginSecret, goalID, raceID, null);
        }
        
        /// <remarks/>
        public void GetGoalPeriodResultsAsync(string applicationID, string loginID, string loginSecret, int goalID, int raceID, object userState) {
            if ((this.GetGoalPeriodResultsOperationCompleted == null)) {
                this.GetGoalPeriodResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGoalPeriodResultsOperationCompleted);
            }
            this.InvokeAsync("GetGoalPeriodResults", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        goalID,
                        raceID}, this.GetGoalPeriodResultsOperationCompleted, userState);
        }
        
        private void OnGetGoalPeriodResultsOperationCompleted(object arg) {
            if ((this.GetGoalPeriodResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGoalPeriodResultsCompleted(this, new GetGoalPeriodResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/ValidateUserName", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidateUserName(string applicationID, string loginID, string loginSecret, string userName) {
            this.Invoke("ValidateUserName", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        userName});
        }
        
        /// <remarks/>
        public void ValidateUserNameAsync(string applicationID, string loginID, string loginSecret, string userName) {
            this.ValidateUserNameAsync(applicationID, loginID, loginSecret, userName, null);
        }
        
        /// <remarks/>
        public void ValidateUserNameAsync(string applicationID, string loginID, string loginSecret, string userName, object userState) {
            if ((this.ValidateUserNameOperationCompleted == null)) {
                this.ValidateUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserNameOperationCompleted);
            }
            this.InvokeAsync("ValidateUserName", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        userName}, this.ValidateUserNameOperationCompleted, userState);
        }
        
        private void OnValidateUserNameOperationCompleted(object arg) {
            if ((this.ValidateUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/ValidateEmail", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidateEmail(string applicationID, string loginID, string loginSecret, string email) {
            this.Invoke("ValidateEmail", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        email});
        }
        
        /// <remarks/>
        public void ValidateEmailAsync(string applicationID, string loginID, string loginSecret, string email) {
            this.ValidateEmailAsync(applicationID, loginID, loginSecret, email, null);
        }
        
        /// <remarks/>
        public void ValidateEmailAsync(string applicationID, string loginID, string loginSecret, string email, object userState) {
            if ((this.ValidateEmailOperationCompleted == null)) {
                this.ValidateEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateEmailOperationCompleted);
            }
            this.InvokeAsync("ValidateEmail", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        email}, this.ValidateEmailOperationCompleted, userState);
        }
        
        private void OnValidateEmailOperationCompleted(object arg) {
            if ((this.ValidateEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetRaceFromSignUpCode", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RaceShortInfoResult GetRaceFromSignUpCode(string applicationID, string loginID, string loginSecret, string signUpCode, string hostName) {
            object[] results = this.Invoke("GetRaceFromSignUpCode", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        signUpCode,
                        hostName});
            return ((RaceShortInfoResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetRaceFromSignUpCodeAsync(string applicationID, string loginID, string loginSecret, string signUpCode, string hostName) {
            this.GetRaceFromSignUpCodeAsync(applicationID, loginID, loginSecret, signUpCode, hostName, null);
        }
        
        /// <remarks/>
        public void GetRaceFromSignUpCodeAsync(string applicationID, string loginID, string loginSecret, string signUpCode, string hostName, object userState) {
            if ((this.GetRaceFromSignUpCodeOperationCompleted == null)) {
                this.GetRaceFromSignUpCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRaceFromSignUpCodeOperationCompleted);
            }
            this.InvokeAsync("GetRaceFromSignUpCode", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        signUpCode,
                        hostName}, this.GetRaceFromSignUpCodeOperationCompleted, userState);
        }
        
        private void OnGetRaceFromSignUpCodeOperationCompleted(object arg) {
            if ((this.GetRaceFromSignUpCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRaceFromSignUpCodeCompleted(this, new GetRaceFromSignUpCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/UpdateMySettings", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMySettings(string applicationID, string loginID, string loginSecret, PersonInfo personInfo, string newPasswordPlainText) {
            this.Invoke("UpdateMySettings", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personInfo,
                        newPasswordPlainText});
        }
        
        /// <remarks/>
        public void UpdateMySettingsAsync(string applicationID, string loginID, string loginSecret, PersonInfo personInfo, string newPasswordPlainText) {
            this.UpdateMySettingsAsync(applicationID, loginID, loginSecret, personInfo, newPasswordPlainText, null);
        }
        
        /// <remarks/>
        public void UpdateMySettingsAsync(string applicationID, string loginID, string loginSecret, PersonInfo personInfo, string newPasswordPlainText, object userState) {
            if ((this.UpdateMySettingsOperationCompleted == null)) {
                this.UpdateMySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMySettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateMySettings", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personInfo,
                        newPasswordPlainText}, this.UpdateMySettingsOperationCompleted, userState);
        }
        
        private void OnUpdateMySettingsOperationCompleted(object arg) {
            if ((this.UpdateMySettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMySettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/AddPersonToTeam", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddPersonToTeam(string applicationID, string loginID, string loginSecret, int personID, int teamID) {
            this.Invoke("AddPersonToTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        teamID});
        }
        
        /// <remarks/>
        public void AddPersonToTeamAsync(string applicationID, string loginID, string loginSecret, int personID, int teamID) {
            this.AddPersonToTeamAsync(applicationID, loginID, loginSecret, personID, teamID, null);
        }
        
        /// <remarks/>
        public void AddPersonToTeamAsync(string applicationID, string loginID, string loginSecret, int personID, int teamID, object userState) {
            if ((this.AddPersonToTeamOperationCompleted == null)) {
                this.AddPersonToTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPersonToTeamOperationCompleted);
            }
            this.InvokeAsync("AddPersonToTeam", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        teamID}, this.AddPersonToTeamOperationCompleted, userState);
        }
        
        private void OnAddPersonToTeamOperationCompleted(object arg) {
            if ((this.AddPersonToTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPersonToTeamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetRace", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RaceDetailsResult GetRace(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetRace", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((RaceDetailsResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetRaceAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetRaceAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetRaceAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetRaceOperationCompleted == null)) {
                this.GetRaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRaceOperationCompleted);
            }
            this.InvokeAsync("GetRace", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetRaceOperationCompleted, userState);
        }
        
        private void OnGetRaceOperationCompleted(object arg) {
            if ((this.GetRaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRaceCompleted(this, new GetRaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/UpdatePictureURL", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePictureURL(string applicationID, string loginID, string loginSecret, string pictureURL) {
            this.Invoke("UpdatePictureURL", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        pictureURL});
        }
        
        /// <remarks/>
        public void UpdatePictureURLAsync(string applicationID, string loginID, string loginSecret, string pictureURL) {
            this.UpdatePictureURLAsync(applicationID, loginID, loginSecret, pictureURL, null);
        }
        
        /// <remarks/>
        public void UpdatePictureURLAsync(string applicationID, string loginID, string loginSecret, string pictureURL, object userState) {
            if ((this.UpdatePictureURLOperationCompleted == null)) {
                this.UpdatePictureURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePictureURLOperationCompleted);
            }
            this.InvokeAsync("UpdatePictureURL", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        pictureURL}, this.UpdatePictureURLOperationCompleted, userState);
        }
        
        private void OnUpdatePictureURLOperationCompleted(object arg) {
            if ((this.UpdatePictureURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePictureURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetMySettings", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PersonInfo GetMySettings(string applicationID, string loginID, string loginSecret, int raceID) {
            object[] results = this.Invoke("GetMySettings", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID});
            return ((PersonInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetMySettingsAsync(string applicationID, string loginID, string loginSecret, int raceID) {
            this.GetMySettingsAsync(applicationID, loginID, loginSecret, raceID, null);
        }
        
        /// <remarks/>
        public void GetMySettingsAsync(string applicationID, string loginID, string loginSecret, int raceID, object userState) {
            if ((this.GetMySettingsOperationCompleted == null)) {
                this.GetMySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMySettingsOperationCompleted);
            }
            this.InvokeAsync("GetMySettings", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        raceID}, this.GetMySettingsOperationCompleted, userState);
        }
        
        private void OnGetMySettingsOperationCompleted(object arg) {
            if ((this.GetMySettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMySettingsCompleted(this, new GetMySettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/GetParticipantOverview", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ParticipantOverview GetParticipantOverview(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            object[] results = this.Invoke("GetParticipantOverview", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID});
            return ((ParticipantOverview)(results[0]));
        }
        
        /// <remarks/>
        public void GetParticipantOverviewAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID) {
            this.GetParticipantOverviewAsync(applicationID, loginID, loginSecret, personID, raceID, null);
        }
        
        /// <remarks/>
        public void GetParticipantOverviewAsync(string applicationID, string loginID, string loginSecret, int personID, int raceID, object userState) {
            if ((this.GetParticipantOverviewOperationCompleted == null)) {
                this.GetParticipantOverviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParticipantOverviewOperationCompleted);
            }
            this.InvokeAsync("GetParticipantOverview", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        personID,
                        raceID}, this.GetParticipantOverviewOperationCompleted, userState);
        }
        
        private void OnGetParticipantOverviewOperationCompleted(object arg) {
            if ((this.GetParticipantOverviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParticipantOverviewCompleted(this, new GetParticipantOverviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/TemplateCallHelloWorld", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TemplateCallHelloWorld(string applicationID, string loginID, string loginSecret, string who) {
            object[] results = this.Invoke("TemplateCallHelloWorld", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        who});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TemplateCallHelloWorldAsync(string applicationID, string loginID, string loginSecret, string who) {
            this.TemplateCallHelloWorldAsync(applicationID, loginID, loginSecret, who, null);
        }
        
        /// <remarks/>
        public void TemplateCallHelloWorldAsync(string applicationID, string loginID, string loginSecret, string who, object userState) {
            if ((this.TemplateCallHelloWorldOperationCompleted == null)) {
                this.TemplateCallHelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTemplateCallHelloWorldOperationCompleted);
            }
            this.InvokeAsync("TemplateCallHelloWorld", new object[] {
                        applicationID,
                        loginID,
                        loginSecret,
                        who}, this.TemplateCallHelloWorldOperationCompleted, userState);
        }
        
        private void OnTemplateCallHelloWorldOperationCompleted(object arg) {
            if ((this.TemplateCallHelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TemplateCallHelloWorldCompleted(this, new TemplateCallHelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/ValidateAndCreateSecret", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ValidationResult ValidateAndCreateSecret(string applicationID, string username, string secret, AuthenticationMethod method) {
            object[] results = this.Invoke("ValidateAndCreateSecret", new object[] {
                        applicationID,
                        username,
                        secret,
                        method});
            return ((ValidationResult)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAndCreateSecretAsync(string applicationID, string username, string secret, AuthenticationMethod method) {
            this.ValidateAndCreateSecretAsync(applicationID, username, secret, method, null);
        }
        
        /// <remarks/>
        public void ValidateAndCreateSecretAsync(string applicationID, string username, string secret, AuthenticationMethod method, object userState) {
            if ((this.ValidateAndCreateSecretOperationCompleted == null)) {
                this.ValidateAndCreateSecretOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateAndCreateSecretOperationCompleted);
            }
            this.InvokeAsync("ValidateAndCreateSecret", new object[] {
                        applicationID,
                        username,
                        secret,
                        method}, this.ValidateAndCreateSecretOperationCompleted, userState);
        }
        
        private void OnValidateAndCreateSecretOperationCompleted(object arg) {
            if ((this.ValidateAndCreateSecretCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateAndCreateSecretCompleted(this, new ValidateAndCreateSecretCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.funbeatrace.com/MobileService.asmx/ValidateAndCreateSecret_Alterna" +
            "te", RequestNamespace="http://service.funbeatrace.com/MobileService.asmx", ResponseNamespace="http://service.funbeatrace.com/MobileService.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ValidationResult ValidateAndCreateSecret_Alternate(string applicationID, string username, string secret, AuthenticationMethod method) {
            object[] results = this.Invoke("ValidateAndCreateSecret_Alternate", new object[] {
                        applicationID,
                        username,
                        secret,
                        method});
            return ((ValidationResult)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAndCreateSecret_AlternateAsync(string applicationID, string username, string secret, AuthenticationMethod method) {
            this.ValidateAndCreateSecret_AlternateAsync(applicationID, username, secret, method, null);
        }
        
        /// <remarks/>
        public void ValidateAndCreateSecret_AlternateAsync(string applicationID, string username, string secret, AuthenticationMethod method, object userState) {
            if ((this.ValidateAndCreateSecret_AlternateOperationCompleted == null)) {
                this.ValidateAndCreateSecret_AlternateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateAndCreateSecret_AlternateOperationCompleted);
            }
            this.InvokeAsync("ValidateAndCreateSecret_Alternate", new object[] {
                        applicationID,
                        username,
                        secret,
                        method}, this.ValidateAndCreateSecret_AlternateOperationCompleted, userState);
        }
        
        private void OnValidateAndCreateSecret_AlternateOperationCompleted(object arg) {
            if ((this.ValidateAndCreateSecret_AlternateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateAndCreateSecret_AlternateCompleted(this, new ValidateAndCreateSecret_AlternateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class MedalResult {
        
        private int medalTypeIDField;
        
        private string titleField;
        
        private string descriptionField;
        
        private string imageFileNameField;
        
        private bool isManuallySelectedByUserField;
        
        private int pointsField;
        
        private string addLinkTextField;
        
        private System.Nullable<int> calculationCodeNumberField;
        
        private System.Nullable<System.DateTime> earnedDateTimeField;
        
        private System.Nullable<int> levelMedalRequiresMedalTypeIDField;
        
        private System.Nullable<int> levelStatusIDField;
        
        private string levelImageField;
        
        private System.Nullable<int> levelRankingField;
        
        /// <remarks/>
        public int MedalTypeID {
            get {
                return this.medalTypeIDField;
            }
            set {
                this.medalTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ImageFileName {
            get {
                return this.imageFileNameField;
            }
            set {
                this.imageFileNameField = value;
            }
        }
        
        /// <remarks/>
        public bool isManuallySelectedByUser {
            get {
                return this.isManuallySelectedByUserField;
            }
            set {
                this.isManuallySelectedByUserField = value;
            }
        }
        
        /// <remarks/>
        public int Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
        
        /// <remarks/>
        public string AddLinkText {
            get {
                return this.addLinkTextField;
            }
            set {
                this.addLinkTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> CalculationCodeNumber {
            get {
                return this.calculationCodeNumberField;
            }
            set {
                this.calculationCodeNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> EarnedDateTime {
            get {
                return this.earnedDateTimeField;
            }
            set {
                this.earnedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> LevelMedalRequiresMedalTypeID {
            get {
                return this.levelMedalRequiresMedalTypeIDField;
            }
            set {
                this.levelMedalRequiresMedalTypeIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> LevelStatusID {
            get {
                return this.levelStatusIDField;
            }
            set {
                this.levelStatusIDField = value;
            }
        }
        
        /// <remarks/>
        public string LevelImage {
            get {
                return this.levelImageField;
            }
            set {
                this.levelImageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> LevelRanking {
            get {
                return this.levelRankingField;
            }
            set {
                this.levelRankingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class ValidationResult {
        
        private PersonBriefInfoResult userInfoField;
        
        private string loginIDField;
        
        private string loginSecretField;
        
        private string messageField;
        
        /// <remarks/>
        public PersonBriefInfoResult UserInfo {
            get {
                return this.userInfoField;
            }
            set {
                this.userInfoField = value;
            }
        }
        
        /// <remarks/>
        public string LoginID {
            get {
                return this.loginIDField;
            }
            set {
                this.loginIDField = value;
            }
        }
        
        /// <remarks/>
        public string LoginSecret {
            get {
                return this.loginSecretField;
            }
            set {
                this.loginSecretField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class PersonBriefInfoResult {
        
        private int personIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string mottoField;
        
        private string pictureURLField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Motto {
            get {
                return this.mottoField;
            }
            set {
                this.mottoField = value;
            }
        }
        
        /// <remarks/>
        public string PictureURL {
            get {
                return this.pictureURLField;
            }
            set {
                this.pictureURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class ServerDate {
        
        private string todayDateField;
        
        private string todayTimeField;
        
        /// <remarks/>
        public string TodayDate {
            get {
                return this.todayDateField;
            }
            set {
                this.todayDateField = value;
            }
        }
        
        /// <remarks/>
        public string TodayTime {
            get {
                return this.todayTimeField;
            }
            set {
                this.todayTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class ParticipantOverview {
        
        private RaceDetailsResult raceDetailsField;
        
        private PersonInfo personInfoField;
        
        private TeamInfoResult teamInfoField;
        
        private int numberOfMedalsField;
        
        private int numberOfMedalsEarnedField;
        
        private int totalNumberOfPointsField;
        
        private ServerDate serverDateField;
        
        private System.DateTime minvalidRegistrationDateField;
        
        private System.DateTime maxvalidRegistrationDateField;
        
        /// <remarks/>
        public RaceDetailsResult RaceDetails {
            get {
                return this.raceDetailsField;
            }
            set {
                this.raceDetailsField = value;
            }
        }
        
        /// <remarks/>
        public PersonInfo PersonInfo {
            get {
                return this.personInfoField;
            }
            set {
                this.personInfoField = value;
            }
        }
        
        /// <remarks/>
        public TeamInfoResult TeamInfo {
            get {
                return this.teamInfoField;
            }
            set {
                this.teamInfoField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfMedals {
            get {
                return this.numberOfMedalsField;
            }
            set {
                this.numberOfMedalsField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfMedalsEarned {
            get {
                return this.numberOfMedalsEarnedField;
            }
            set {
                this.numberOfMedalsEarnedField = value;
            }
        }
        
        /// <remarks/>
        public int TotalNumberOfPoints {
            get {
                return this.totalNumberOfPointsField;
            }
            set {
                this.totalNumberOfPointsField = value;
            }
        }
        
        /// <remarks/>
        public ServerDate ServerDate {
            get {
                return this.serverDateField;
            }
            set {
                this.serverDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime minvalidRegistrationDate {
            get {
                return this.minvalidRegistrationDateField;
            }
            set {
                this.minvalidRegistrationDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime maxvalidRegistrationDate {
            get {
                return this.maxvalidRegistrationDateField;
            }
            set {
                this.maxvalidRegistrationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class RaceDetailsResult {
        
        private int raceIDField;
        
        private string raceTitleField;
        
        private int companyIDField;
        
        private string intranetSecretKeyField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private System.DateTime loginsOpenDateTimeField;
        
        private System.DateTime loginsCloseDateTimeField;
        
        private System.Nullable<System.DateTime> goesSecretDateTimeField;
        
        private System.Nullable<System.DateTime> goesSecretEndDateField;
        
        private System.DateTime lastRegisterDateTimeField;
        
        private System.DateTime showWinnerDateTimeField;
        
        private System.Nullable<System.DateTime> showInvitationToExternalSiteDateTimeField;
        
        private System.Nullable<int> minutesRequiredForAnActivityToBeOkField;
        
        private System.Nullable<int> maxMinutesForTrainingTypePerDayField;
        
        private System.Nullable<int> maxMinutesTotalPerDayField;
        
        private System.Nullable<int> maxNumberOfDaysUserCanWaitToRegisterField;
        
        private string loginURLField;
        
        private bool isDistanceActivatedField;
        
        private bool isIntensityActivatedField;
        
        private bool isStepsActivatedField;
        
        private bool isDemoRaceField;
        
        private string companyNameField;
        
        private string hostNameField;
        
        private string mobileHostNameField;
        
        private string googleSiteVerificationField;
        
        private string teamLevelTitlesField;
        
        private string bookingRaceTypeIDField;
        
        private bool isLoginPossibleField;
        
        private bool isShowWinnersPossibleField;
        
        private bool isShowTeamScoresPossibleField;
        
        private bool isRegisterTrainingPossibleField;
        
        private bool isSecretModeField;
        
        private bool isLastTrainingDayOverField;
        
        private bool isHasRaceStartedField;
        
        private bool isAwaitingShowWinnersField;
        
        private bool isShowAddTrainingOnTabletField;
        
        private int maxDistanceFromFirstCommonParentField;
        
        private System.Nullable<int> maxTeamsPerListField;
        
        private bool isPersonsCanHideTrainingCalendarField;
        
        private bool isParticipantSearchField;
        
        private System.Nullable<int> pointsToShowFBLikeField;
        
        private System.Nullable<System.DateTime> pauseFirstDateField;
        
        private System.Nullable<System.DateTime> pauseLastDateField;
        
        private System.Nullable<System.DateTime> pauseLastTrainingDateField;
        
        private bool isRacePausedField;
        
        private bool isShowHonestyCheckboxField;
        
        private bool isShowGuideField;
        
        private string guideURLField;
        
        private System.Nullable<int> whatsGoingOnThresholdField;
        
        private System.Nullable<int> rankingThresholdField;
        
        private int cacheDurationMinutesHighscoresField;
        
        private bool isAllowRequestNewActivityField;
        
        private bool isRestrictTeamNameChangeField;
        
        private bool isRestrictTeamNameChangeForEverybodyField;
        
        private System.Nullable<System.DateTime> suggestTeamOpenDateTimeField;
        
        private System.Nullable<System.DateTime> suggestTeamCloseDateTimeField;
        
        private bool isShowMyListAlsoDuringSecretPeriodField;
        
        private string customerPanelField;
        
        private int maxRecentNewsListingField;
        
        private bool isIntensityUsedForScoresField;
        
        private System.Nullable<int> maxPointsPerWeekField;
        
        private bool isAllowManageTeamMembersField;
        
        private string defaultPasswordField;
        
        private string teamAdminCommentField;
        
        private bool teamAdminAutomaticAddField;
        
        private bool isShowMyScoreField;
        
        private bool isShowMyScoreTeamListField;
        
        private int targetPersonScoreField;
        
        private bool signUpGarminConnectField;
        
        private bool isCustomScorelistsField;
        
        private bool isPersonalScoresThisWeekOnlyField;
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        public string RaceTitle {
            get {
                return this.raceTitleField;
            }
            set {
                this.raceTitleField = value;
            }
        }
        
        /// <remarks/>
        public int CompanyID {
            get {
                return this.companyIDField;
            }
            set {
                this.companyIDField = value;
            }
        }
        
        /// <remarks/>
        public string IntranetSecretKey {
            get {
                return this.intranetSecretKeyField;
            }
            set {
                this.intranetSecretKeyField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LoginsOpenDateTime {
            get {
                return this.loginsOpenDateTimeField;
            }
            set {
                this.loginsOpenDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LoginsCloseDateTime {
            get {
                return this.loginsCloseDateTimeField;
            }
            set {
                this.loginsCloseDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> GoesSecretDateTime {
            get {
                return this.goesSecretDateTimeField;
            }
            set {
                this.goesSecretDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> GoesSecretEndDate {
            get {
                return this.goesSecretEndDateField;
            }
            set {
                this.goesSecretEndDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastRegisterDateTime {
            get {
                return this.lastRegisterDateTimeField;
            }
            set {
                this.lastRegisterDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ShowWinnerDateTime {
            get {
                return this.showWinnerDateTimeField;
            }
            set {
                this.showWinnerDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ShowInvitationToExternalSiteDateTime {
            get {
                return this.showInvitationToExternalSiteDateTimeField;
            }
            set {
                this.showInvitationToExternalSiteDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MinutesRequiredForAnActivityToBeOk {
            get {
                return this.minutesRequiredForAnActivityToBeOkField;
            }
            set {
                this.minutesRequiredForAnActivityToBeOkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MaxMinutesForTrainingTypePerDay {
            get {
                return this.maxMinutesForTrainingTypePerDayField;
            }
            set {
                this.maxMinutesForTrainingTypePerDayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MaxMinutesTotalPerDay {
            get {
                return this.maxMinutesTotalPerDayField;
            }
            set {
                this.maxMinutesTotalPerDayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MaxNumberOfDaysUserCanWaitToRegister {
            get {
                return this.maxNumberOfDaysUserCanWaitToRegisterField;
            }
            set {
                this.maxNumberOfDaysUserCanWaitToRegisterField = value;
            }
        }
        
        /// <remarks/>
        public string LoginURL {
            get {
                return this.loginURLField;
            }
            set {
                this.loginURLField = value;
            }
        }
        
        /// <remarks/>
        public bool isDistanceActivated {
            get {
                return this.isDistanceActivatedField;
            }
            set {
                this.isDistanceActivatedField = value;
            }
        }
        
        /// <remarks/>
        public bool isIntensityActivated {
            get {
                return this.isIntensityActivatedField;
            }
            set {
                this.isIntensityActivatedField = value;
            }
        }
        
        /// <remarks/>
        public bool isStepsActivated {
            get {
                return this.isStepsActivatedField;
            }
            set {
                this.isStepsActivatedField = value;
            }
        }
        
        /// <remarks/>
        public bool isDemoRace {
            get {
                return this.isDemoRaceField;
            }
            set {
                this.isDemoRaceField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public string HostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        public string MobileHostName {
            get {
                return this.mobileHostNameField;
            }
            set {
                this.mobileHostNameField = value;
            }
        }
        
        /// <remarks/>
        public string GoogleSiteVerification {
            get {
                return this.googleSiteVerificationField;
            }
            set {
                this.googleSiteVerificationField = value;
            }
        }
        
        /// <remarks/>
        public string TeamLevelTitles {
            get {
                return this.teamLevelTitlesField;
            }
            set {
                this.teamLevelTitlesField = value;
            }
        }
        
        /// <remarks/>
        public string BookingRaceTypeID {
            get {
                return this.bookingRaceTypeIDField;
            }
            set {
                this.bookingRaceTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isLoginPossible {
            get {
                return this.isLoginPossibleField;
            }
            set {
                this.isLoginPossibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isShowWinnersPossible {
            get {
                return this.isShowWinnersPossibleField;
            }
            set {
                this.isShowWinnersPossibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isShowTeamScoresPossible {
            get {
                return this.isShowTeamScoresPossibleField;
            }
            set {
                this.isShowTeamScoresPossibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isRegisterTrainingPossible {
            get {
                return this.isRegisterTrainingPossibleField;
            }
            set {
                this.isRegisterTrainingPossibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isSecretMode {
            get {
                return this.isSecretModeField;
            }
            set {
                this.isSecretModeField = value;
            }
        }
        
        /// <remarks/>
        public bool isLastTrainingDayOver {
            get {
                return this.isLastTrainingDayOverField;
            }
            set {
                this.isLastTrainingDayOverField = value;
            }
        }
        
        /// <remarks/>
        public bool isHasRaceStarted {
            get {
                return this.isHasRaceStartedField;
            }
            set {
                this.isHasRaceStartedField = value;
            }
        }
        
        /// <remarks/>
        public bool isAwaitingShowWinners {
            get {
                return this.isAwaitingShowWinnersField;
            }
            set {
                this.isAwaitingShowWinnersField = value;
            }
        }
        
        /// <remarks/>
        public bool isShowAddTrainingOnTablet {
            get {
                return this.isShowAddTrainingOnTabletField;
            }
            set {
                this.isShowAddTrainingOnTabletField = value;
            }
        }
        
        /// <remarks/>
        public int MaxDistanceFromFirstCommonParent {
            get {
                return this.maxDistanceFromFirstCommonParentField;
            }
            set {
                this.maxDistanceFromFirstCommonParentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MaxTeamsPerList {
            get {
                return this.maxTeamsPerListField;
            }
            set {
                this.maxTeamsPerListField = value;
            }
        }
        
        /// <remarks/>
        public bool isPersonsCanHideTrainingCalendar {
            get {
                return this.isPersonsCanHideTrainingCalendarField;
            }
            set {
                this.isPersonsCanHideTrainingCalendarField = value;
            }
        }
        
        /// <remarks/>
        public bool isParticipantSearch {
            get {
                return this.isParticipantSearchField;
            }
            set {
                this.isParticipantSearchField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> PointsToShowFBLike {
            get {
                return this.pointsToShowFBLikeField;
            }
            set {
                this.pointsToShowFBLikeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> PauseFirstDate {
            get {
                return this.pauseFirstDateField;
            }
            set {
                this.pauseFirstDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> PauseLastDate {
            get {
                return this.pauseLastDateField;
            }
            set {
                this.pauseLastDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> PauseLastTrainingDate {
            get {
                return this.pauseLastTrainingDateField;
            }
            set {
                this.pauseLastTrainingDateField = value;
            }
        }
        
        /// <remarks/>
        public bool isRacePaused {
            get {
                return this.isRacePausedField;
            }
            set {
                this.isRacePausedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsShowHonestyCheckbox {
            get {
                return this.isShowHonestyCheckboxField;
            }
            set {
                this.isShowHonestyCheckboxField = value;
            }
        }
        
        /// <remarks/>
        public bool IsShowGuide {
            get {
                return this.isShowGuideField;
            }
            set {
                this.isShowGuideField = value;
            }
        }
        
        /// <remarks/>
        public string GuideURL {
            get {
                return this.guideURLField;
            }
            set {
                this.guideURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> WhatsGoingOnThreshold {
            get {
                return this.whatsGoingOnThresholdField;
            }
            set {
                this.whatsGoingOnThresholdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> RankingThreshold {
            get {
                return this.rankingThresholdField;
            }
            set {
                this.rankingThresholdField = value;
            }
        }
        
        /// <remarks/>
        public int CacheDurationMinutesHighscores {
            get {
                return this.cacheDurationMinutesHighscoresField;
            }
            set {
                this.cacheDurationMinutesHighscoresField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowRequestNewActivity {
            get {
                return this.isAllowRequestNewActivityField;
            }
            set {
                this.isAllowRequestNewActivityField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRestrictTeamNameChange {
            get {
                return this.isRestrictTeamNameChangeField;
            }
            set {
                this.isRestrictTeamNameChangeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRestrictTeamNameChangeForEverybody {
            get {
                return this.isRestrictTeamNameChangeForEverybodyField;
            }
            set {
                this.isRestrictTeamNameChangeForEverybodyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> SuggestTeamOpenDateTime {
            get {
                return this.suggestTeamOpenDateTimeField;
            }
            set {
                this.suggestTeamOpenDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> SuggestTeamCloseDateTime {
            get {
                return this.suggestTeamCloseDateTimeField;
            }
            set {
                this.suggestTeamCloseDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsShowMyListAlsoDuringSecretPeriod {
            get {
                return this.isShowMyListAlsoDuringSecretPeriodField;
            }
            set {
                this.isShowMyListAlsoDuringSecretPeriodField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerPanel {
            get {
                return this.customerPanelField;
            }
            set {
                this.customerPanelField = value;
            }
        }
        
        /// <remarks/>
        public int MaxRecentNewsListing {
            get {
                return this.maxRecentNewsListingField;
            }
            set {
                this.maxRecentNewsListingField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIntensityUsedForScores {
            get {
                return this.isIntensityUsedForScoresField;
            }
            set {
                this.isIntensityUsedForScoresField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MaxPointsPerWeek {
            get {
                return this.maxPointsPerWeekField;
            }
            set {
                this.maxPointsPerWeekField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowManageTeamMembers {
            get {
                return this.isAllowManageTeamMembersField;
            }
            set {
                this.isAllowManageTeamMembersField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultPassword {
            get {
                return this.defaultPasswordField;
            }
            set {
                this.defaultPasswordField = value;
            }
        }
        
        /// <remarks/>
        public string TeamAdminComment {
            get {
                return this.teamAdminCommentField;
            }
            set {
                this.teamAdminCommentField = value;
            }
        }
        
        /// <remarks/>
        public bool TeamAdminAutomaticAdd {
            get {
                return this.teamAdminAutomaticAddField;
            }
            set {
                this.teamAdminAutomaticAddField = value;
            }
        }
        
        /// <remarks/>
        public bool IsShowMyScore {
            get {
                return this.isShowMyScoreField;
            }
            set {
                this.isShowMyScoreField = value;
            }
        }
        
        /// <remarks/>
        public bool IsShowMyScoreTeamList {
            get {
                return this.isShowMyScoreTeamListField;
            }
            set {
                this.isShowMyScoreTeamListField = value;
            }
        }
        
        /// <remarks/>
        public int TargetPersonScore {
            get {
                return this.targetPersonScoreField;
            }
            set {
                this.targetPersonScoreField = value;
            }
        }
        
        /// <remarks/>
        public bool SignUpGarminConnect {
            get {
                return this.signUpGarminConnectField;
            }
            set {
                this.signUpGarminConnectField = value;
            }
        }
        
        /// <remarks/>
        public bool IsCustomScorelists {
            get {
                return this.isCustomScorelistsField;
            }
            set {
                this.isCustomScorelistsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPersonalScoresThisWeekOnly {
            get {
                return this.isPersonalScoresThisWeekOnlyField;
            }
            set {
                this.isPersonalScoresThisWeekOnlyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class PersonInfo {
        
        private System.Nullable<int> personIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string userNameField;
        
        private string emailField;
        
        private string passwordEncryptedField;
        
        private string passwordSaltField;
        
        private string internalPictureURLField;
        
        private string mottoField;
        
        private string personalDescriptionField;
        
        private System.Nullable<System.DateTime> createdDateTimeField;
        
        private System.Nullable<System.DateTime> mostRecentLoginDateTimeField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        private string facebookSecretField;
        
        private string funBeatLoginIDField;
        
        private string funBeatLoginSecretField;
        
        private bool isShowTrainingDataField;
        
        private string fitbitAuthAccessTokenField;
        
        private string fitbitAuthSecretField;
        
        private System.DateTime mostRecentFitbitUpdatedDateField;
        
        private int fitBitDeviceRaceIDField;
        
        private string garminAuthAccessTokenField;
        
        private string garminAuthSecretField;
        
        private System.DateTime mostRecentGarminUpdateDateField;
        
        private bool isShowGuideOnLoginField;
        
        private System.Nullable<bool> isShareToFacebookField;
        
        private System.Nullable<int> weightField;
        
        private System.Nullable<int> heightField;
        
        private System.Nullable<int> ageField;
        
        private string sexField;
        
        private string facebookAccessTokenField;
        
        private string preferredCultureNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string PasswordEncrypted {
            get {
                return this.passwordEncryptedField;
            }
            set {
                this.passwordEncryptedField = value;
            }
        }
        
        /// <remarks/>
        public string PasswordSalt {
            get {
                return this.passwordSaltField;
            }
            set {
                this.passwordSaltField = value;
            }
        }
        
        /// <remarks/>
        public string InternalPictureURL {
            get {
                return this.internalPictureURLField;
            }
            set {
                this.internalPictureURLField = value;
            }
        }
        
        /// <remarks/>
        public string Motto {
            get {
                return this.mottoField;
            }
            set {
                this.mottoField = value;
            }
        }
        
        /// <remarks/>
        public string PersonalDescription {
            get {
                return this.personalDescriptionField;
            }
            set {
                this.personalDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CreatedDateTime {
            get {
                return this.createdDateTimeField;
            }
            set {
                this.createdDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> MostRecentLoginDateTime {
            get {
                return this.mostRecentLoginDateTimeField;
            }
            set {
                this.mostRecentLoginDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
        
        /// <remarks/>
        public string FacebookSecret {
            get {
                return this.facebookSecretField;
            }
            set {
                this.facebookSecretField = value;
            }
        }
        
        /// <remarks/>
        public string FunBeatLoginID {
            get {
                return this.funBeatLoginIDField;
            }
            set {
                this.funBeatLoginIDField = value;
            }
        }
        
        /// <remarks/>
        public string FunBeatLoginSecret {
            get {
                return this.funBeatLoginSecretField;
            }
            set {
                this.funBeatLoginSecretField = value;
            }
        }
        
        /// <remarks/>
        public bool IsShowTrainingData {
            get {
                return this.isShowTrainingDataField;
            }
            set {
                this.isShowTrainingDataField = value;
            }
        }
        
        /// <remarks/>
        public string FitbitAuthAccessToken {
            get {
                return this.fitbitAuthAccessTokenField;
            }
            set {
                this.fitbitAuthAccessTokenField = value;
            }
        }
        
        /// <remarks/>
        public string FitbitAuthSecret {
            get {
                return this.fitbitAuthSecretField;
            }
            set {
                this.fitbitAuthSecretField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime MostRecentFitbitUpdatedDate {
            get {
                return this.mostRecentFitbitUpdatedDateField;
            }
            set {
                this.mostRecentFitbitUpdatedDateField = value;
            }
        }
        
        /// <remarks/>
        public int FitBitDeviceRaceID {
            get {
                return this.fitBitDeviceRaceIDField;
            }
            set {
                this.fitBitDeviceRaceIDField = value;
            }
        }
        
        /// <remarks/>
        public string GarminAuthAccessToken {
            get {
                return this.garminAuthAccessTokenField;
            }
            set {
                this.garminAuthAccessTokenField = value;
            }
        }
        
        /// <remarks/>
        public string GarminAuthSecret {
            get {
                return this.garminAuthSecretField;
            }
            set {
                this.garminAuthSecretField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime MostRecentGarminUpdateDate {
            get {
                return this.mostRecentGarminUpdateDateField;
            }
            set {
                this.mostRecentGarminUpdateDateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsShowGuideOnLogin {
            get {
                return this.isShowGuideOnLoginField;
            }
            set {
                this.isShowGuideOnLoginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IsShareToFacebook {
            get {
                return this.isShareToFacebookField;
            }
            set {
                this.isShareToFacebookField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Age {
            get {
                return this.ageField;
            }
            set {
                this.ageField = value;
            }
        }
        
        /// <remarks/>
        public string Sex {
            get {
                return this.sexField;
            }
            set {
                this.sexField = value;
            }
        }
        
        /// <remarks/>
        public string FacebookAccessToken {
            get {
                return this.facebookAccessTokenField;
            }
            set {
                this.facebookAccessTokenField = value;
            }
        }
        
        /// <remarks/>
        public string PreferredCultureName {
            get {
                return this.preferredCultureNameField;
            }
            set {
                this.preferredCultureNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class TeamInfoResult {
        
        private System.Nullable<int> teamIDField;
        
        private string teamNameField;
        
        private string internalPictureURLField;
        
        private int teamLevelField;
        
        private string mottoField;
        
        private string purposeField;
        
        private int averagePointsPerPersonField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        private int raceIDField;
        
        private bool isTeamMembersVisibleField;
        
        private System.Nullable<int> parentTeamIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TeamID {
            get {
                return this.teamIDField;
            }
            set {
                this.teamIDField = value;
            }
        }
        
        /// <remarks/>
        public string TeamName {
            get {
                return this.teamNameField;
            }
            set {
                this.teamNameField = value;
            }
        }
        
        /// <remarks/>
        public string InternalPictureURL {
            get {
                return this.internalPictureURLField;
            }
            set {
                this.internalPictureURLField = value;
            }
        }
        
        /// <remarks/>
        public int TeamLevel {
            get {
                return this.teamLevelField;
            }
            set {
                this.teamLevelField = value;
            }
        }
        
        /// <remarks/>
        public string Motto {
            get {
                return this.mottoField;
            }
            set {
                this.mottoField = value;
            }
        }
        
        /// <remarks/>
        public string Purpose {
            get {
                return this.purposeField;
            }
            set {
                this.purposeField = value;
            }
        }
        
        /// <remarks/>
        public int AveragePointsPerPerson {
            get {
                return this.averagePointsPerPersonField;
            }
            set {
                this.averagePointsPerPersonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isTeamMembersVisible {
            get {
                return this.isTeamMembersVisibleField;
            }
            set {
                this.isTeamMembersVisibleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ParentTeamID {
            get {
                return this.parentTeamIDField;
            }
            set {
                this.parentTeamIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class RaceShortInfoResult {
        
        private int raceIDField;
        
        private string raceTitleField;
        
        private string companyNameField;
        
        private int maxUsersForSignUpCodeField;
        
        private int usersRegisteredBySignUpCodeField;
        
        private bool isSignUpCodesActivatedField;
        
        private bool isAllowSignUpCreateNewTeamsField;
        
        private bool isAllowManageTeamMembersField;
        
        private string defaultPasswordField;
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        public string RaceTitle {
            get {
                return this.raceTitleField;
            }
            set {
                this.raceTitleField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public int MaxUsersForSignUpCode {
            get {
                return this.maxUsersForSignUpCodeField;
            }
            set {
                this.maxUsersForSignUpCodeField = value;
            }
        }
        
        /// <remarks/>
        public int UsersRegisteredBySignUpCode {
            get {
                return this.usersRegisteredBySignUpCodeField;
            }
            set {
                this.usersRegisteredBySignUpCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool isSignUpCodesActivated {
            get {
                return this.isSignUpCodesActivatedField;
            }
            set {
                this.isSignUpCodesActivatedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowSignUpCreateNewTeams {
            get {
                return this.isAllowSignUpCreateNewTeamsField;
            }
            set {
                this.isAllowSignUpCreateNewTeamsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowManageTeamMembers {
            get {
                return this.isAllowManageTeamMembersField;
            }
            set {
                this.isAllowManageTeamMembersField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultPassword {
            get {
                return this.defaultPasswordField;
            }
            set {
                this.defaultPasswordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class GoalPeriodResult {
        
        private int goalIDField;
        
        private string goalNameField;
        
        private System.Nullable<int> yearField;
        
        private System.Nullable<int> monthField;
        
        private System.Nullable<int> weekField;
        
        private double achievedField;
        
        private double targetField;
        
        private double percentageField;
        
        private GoalUnits unitField;
        
        /// <remarks/>
        public int GoalID {
            get {
                return this.goalIDField;
            }
            set {
                this.goalIDField = value;
            }
        }
        
        /// <remarks/>
        public string GoalName {
            get {
                return this.goalNameField;
            }
            set {
                this.goalNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Month {
            get {
                return this.monthField;
            }
            set {
                this.monthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Week {
            get {
                return this.weekField;
            }
            set {
                this.weekField = value;
            }
        }
        
        /// <remarks/>
        public double Achieved {
            get {
                return this.achievedField;
            }
            set {
                this.achievedField = value;
            }
        }
        
        /// <remarks/>
        public double Target {
            get {
                return this.targetField;
            }
            set {
                this.targetField = value;
            }
        }
        
        /// <remarks/>
        public double Percentage {
            get {
                return this.percentageField;
            }
            set {
                this.percentageField = value;
            }
        }
        
        /// <remarks/>
        public GoalUnits Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public enum GoalUnits {
        
        /// <remarks/>
        Distance,
        
        /// <remarks/>
        Minutes,
        
        /// <remarks/>
        TrainingCount,
        
        /// <remarks/>
        Steps,
        
        /// <remarks/>
        Manual,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class GoalBriefInfoResult {
        
        private int goalIDField;
        
        private string goalNameField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private GoalUnits unitField;
        
        /// <remarks/>
        public int GoalID {
            get {
                return this.goalIDField;
            }
            set {
                this.goalIDField = value;
            }
        }
        
        /// <remarks/>
        public string GoalName {
            get {
                return this.goalNameField;
            }
            set {
                this.goalNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public GoalUnits Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class Goal {
        
        private System.Nullable<int> goalIDField;
        
        private int raceIDField;
        
        private int personIDField;
        
        private string goalNameField;
        
        private GoalPeriodLengths periodLengthField;
        
        private System.Nullable<double> distanceField;
        
        private System.Nullable<double> minutesField;
        
        private System.Nullable<double> trainingCountField;
        
        private System.Nullable<double> stepsField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private TrainingType[] trainingTypesField;
        
        private System.DateTime createdDateTimeField;
        
        private System.Nullable<int> manualLevelAchievedField;
        
        private bool isPublicField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> GoalID {
            get {
                return this.goalIDField;
            }
            set {
                this.goalIDField = value;
            }
        }
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string GoalName {
            get {
                return this.goalNameField;
            }
            set {
                this.goalNameField = value;
            }
        }
        
        /// <remarks/>
        public GoalPeriodLengths PeriodLength {
            get {
                return this.periodLengthField;
            }
            set {
                this.periodLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Distance {
            get {
                return this.distanceField;
            }
            set {
                this.distanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Minutes {
            get {
                return this.minutesField;
            }
            set {
                this.minutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> TrainingCount {
            get {
                return this.trainingCountField;
            }
            set {
                this.trainingCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Steps {
            get {
                return this.stepsField;
            }
            set {
                this.stepsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public TrainingType[] TrainingTypes {
            get {
                return this.trainingTypesField;
            }
            set {
                this.trainingTypesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDateTime {
            get {
                return this.createdDateTimeField;
            }
            set {
                this.createdDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ManualLevelAchieved {
            get {
                return this.manualLevelAchievedField;
            }
            set {
                this.manualLevelAchievedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public enum GoalPeriodLengths {
        
        /// <remarks/>
        EntirePeriod,
        
        /// <remarks/>
        Month,
        
        /// <remarks/>
        Week,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class TrainingType {
        
        private string trainingTypeNameField;
        
        private int trainingTypeIDField;
        
        private TrainingTypeUnits unitField;
        
        private string unitAsStringField;
        
        private float weightField;
        
        private string descriptionField;
        
        private System.Nullable<int> dailyLimitField;
        
        private int activityCategoryIDField;
        
        private string activityCategoryNameField;
        
        private bool isIntensityField;
        
        /// <remarks/>
        public string TrainingTypeName {
            get {
                return this.trainingTypeNameField;
            }
            set {
                this.trainingTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public int TrainingTypeID {
            get {
                return this.trainingTypeIDField;
            }
            set {
                this.trainingTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public TrainingTypeUnits Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        public string UnitAsString {
            get {
                return this.unitAsStringField;
            }
            set {
                this.unitAsStringField = value;
            }
        }
        
        /// <remarks/>
        public float Weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> DailyLimit {
            get {
                return this.dailyLimitField;
            }
            set {
                this.dailyLimitField = value;
            }
        }
        
        /// <remarks/>
        public int ActivityCategoryID {
            get {
                return this.activityCategoryIDField;
            }
            set {
                this.activityCategoryIDField = value;
            }
        }
        
        /// <remarks/>
        public string ActivityCategoryName {
            get {
                return this.activityCategoryNameField;
            }
            set {
                this.activityCategoryNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIntensity {
            get {
                return this.isIntensityField;
            }
            set {
                this.isIntensityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public enum TrainingTypeUnits {
        
        Minutes,
        
        Steps,
        
        Score,
        
        Fixed,

		Adjustment,

		Coaching
	}
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class PostingInfoResult {
        
        private int postingIDField;
        
        private System.Nullable<int> threadIDField;
        
        private System.Nullable<int> teamIDField;
        
        private string subjectField;
        
        private string bodyField;
        
        private int personIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string mottoField;
        
        private string pictureURLField;
        
        private bool isReadField;
        
        private System.DateTime createdDateTimeField;
        
        /// <remarks/>
        public int PostingID {
            get {
                return this.postingIDField;
            }
            set {
                this.postingIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ThreadID {
            get {
                return this.threadIDField;
            }
            set {
                this.threadIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TeamID {
            get {
                return this.teamIDField;
            }
            set {
                this.teamIDField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Motto {
            get {
                return this.mottoField;
            }
            set {
                this.mottoField = value;
            }
        }
        
        /// <remarks/>
        public string PictureURL {
            get {
                return this.pictureURLField;
            }
            set {
                this.pictureURLField = value;
            }
        }
        
        /// <remarks/>
        public bool isRead {
            get {
                return this.isReadField;
            }
            set {
                this.isReadField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDateTime {
            get {
                return this.createdDateTimeField;
            }
            set {
                this.createdDateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class Posting {
        
        private System.Nullable<int> postingIDField;
        
        private int raceIDField;
        
        private System.Nullable<int> threadIDField;
        
        private string subjectField;
        
        private string bodyField;
        
        private System.Nullable<int> teamIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> PostingID {
            get {
                return this.postingIDField;
            }
            set {
                this.postingIDField = value;
            }
        }
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ThreadID {
            get {
                return this.threadIDField;
            }
            set {
                this.threadIDField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TeamID {
            get {
                return this.teamIDField;
            }
            set {
                this.teamIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class ThreadInfoResult {
        
        private int threadIDField;
        
        private string subjectField;
        
        private System.DateTime createdDateTimeField;
        
        private int numberOfPostingsField;
        
        private int numberOfUnreadPostingsField;
        
        private System.Nullable<System.DateTime> mostRecentPostingDateTimeField;
        
        private System.Nullable<int> mostRecentPostCreatedByIDField;
        
        private string mostRecentPostCreatedByNameField;
        
        /// <remarks/>
        public int ThreadID {
            get {
                return this.threadIDField;
            }
            set {
                this.threadIDField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDateTime {
            get {
                return this.createdDateTimeField;
            }
            set {
                this.createdDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfPostings {
            get {
                return this.numberOfPostingsField;
            }
            set {
                this.numberOfPostingsField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfUnreadPostings {
            get {
                return this.numberOfUnreadPostingsField;
            }
            set {
                this.numberOfUnreadPostingsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> MostRecentPostingDateTime {
            get {
                return this.mostRecentPostingDateTimeField;
            }
            set {
                this.mostRecentPostingDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MostRecentPostCreatedByID {
            get {
                return this.mostRecentPostCreatedByIDField;
            }
            set {
                this.mostRecentPostCreatedByIDField = value;
            }
        }
        
        /// <remarks/>
        public string MostRecentPostCreatedByName {
            get {
                return this.mostRecentPostCreatedByNameField;
            }
            set {
                this.mostRecentPostCreatedByNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class PersonalMessageInfoResult {
        
        private int personalMessageIDField;
        
        private int fromPersonIDField;
        
        private int toPersonIDField;
        
        private string messageTextField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string pictureURLField;
        
        private System.DateTime createdDateTimeField;
        
        private System.Nullable<System.DateTime> archivedByRecipientDateTimeField;
        
        private bool isReadField;
        
        private bool isPublicField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        /// <remarks/>
        public int PersonalMessageID {
            get {
                return this.personalMessageIDField;
            }
            set {
                this.personalMessageIDField = value;
            }
        }
        
        /// <remarks/>
        public int FromPersonID {
            get {
                return this.fromPersonIDField;
            }
            set {
                this.fromPersonIDField = value;
            }
        }
        
        /// <remarks/>
        public int ToPersonID {
            get {
                return this.toPersonIDField;
            }
            set {
                this.toPersonIDField = value;
            }
        }
        
        /// <remarks/>
        public string MessageText {
            get {
                return this.messageTextField;
            }
            set {
                this.messageTextField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string PictureURL {
            get {
                return this.pictureURLField;
            }
            set {
                this.pictureURLField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDateTime {
            get {
                return this.createdDateTimeField;
            }
            set {
                this.createdDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ArchivedByRecipientDateTime {
            get {
                return this.archivedByRecipientDateTimeField;
            }
            set {
                this.archivedByRecipientDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool isRead {
            get {
                return this.isReadField;
            }
            set {
                this.isReadField = value;
            }
        }
        
        /// <remarks/>
        public bool isPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class ActivityStream {
        
        private int personIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string trainingOrMedalTextField;
        
        private System.Nullable<int> minutesField;
        
        private System.Nullable<int> pointsField;
        
        private System.Nullable<int> medalIDField;
        
        private System.Nullable<int> trainingIDField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> startDateTimeField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string TrainingOrMedalText {
            get {
                return this.trainingOrMedalTextField;
            }
            set {
                this.trainingOrMedalTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Minutes {
            get {
                return this.minutesField;
            }
            set {
                this.minutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MedalID {
            get {
                return this.medalIDField;
            }
            set {
                this.medalIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TrainingID {
            get {
                return this.trainingIDField;
            }
            set {
                this.trainingIDField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class PersonScoreResult {
        
        private int raceIDField;
        
        private int personIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private int totalNumberOfPointsField;
        
        private string isTeamLeaderField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public int TotalNumberOfPoints {
            get {
                return this.totalNumberOfPointsField;
            }
            set {
                this.totalNumberOfPointsField = value;
            }
        }
        
        /// <remarks/>
        public string isTeamLeader {
            get {
                return this.isTeamLeaderField;
            }
            set {
                this.isTeamLeaderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class TeamScoreResult {
        
        private int teamIDField;
        
        private string teamNameField;
        
        private int teamLevelField;
        
        private int participantsCountField;
        
        private int averageNumberOfPointsPerPersonField;
        
        private bool isTeamMembersVisibleField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        private string purposeField;
        
        /// <remarks/>
        public int TeamID {
            get {
                return this.teamIDField;
            }
            set {
                this.teamIDField = value;
            }
        }
        
        /// <remarks/>
        public string TeamName {
            get {
                return this.teamNameField;
            }
            set {
                this.teamNameField = value;
            }
        }
        
        /// <remarks/>
        public int TeamLevel {
            get {
                return this.teamLevelField;
            }
            set {
                this.teamLevelField = value;
            }
        }
        
        /// <remarks/>
        public int ParticipantsCount {
            get {
                return this.participantsCountField;
            }
            set {
                this.participantsCountField = value;
            }
        }
        
        /// <remarks/>
        public int AverageNumberOfPointsPerPerson {
            get {
                return this.averageNumberOfPointsPerPersonField;
            }
            set {
                this.averageNumberOfPointsPerPersonField = value;
            }
        }
        
        /// <remarks/>
        public bool isTeamMembersVisible {
            get {
                return this.isTeamMembersVisibleField;
            }
            set {
                this.isTeamMembersVisibleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
        
        /// <remarks/>
        public string Purpose {
            get {
                return this.purposeField;
            }
            set {
                this.purposeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class DailyActivityScore {
        
        private System.DateTime dayField;
        
        private int activityScoreField;
        
        /// <remarks/>
        public System.DateTime Day {
            get {
                return this.dayField;
            }
            set {
                this.dayField = value;
            }
        }
        
        /// <remarks/>
        public int ActivityScore {
            get {
                return this.activityScoreField;
            }
            set {
                this.activityScoreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class TrainingAndPersonBriefInfoResult {
        
        private int personIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private int trainingIDField;
        
        private string trainingTypeNameField;
        
        private System.Nullable<int> minutesField;
        
        private System.Nullable<int> pointsField;
        
        private System.Nullable<double> distanceField;
        
        private string descriptionField;
        
        private System.DateTime startDateTimeField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public int TrainingID {
            get {
                return this.trainingIDField;
            }
            set {
                this.trainingIDField = value;
            }
        }
        
        /// <remarks/>
        public string TrainingTypeName {
            get {
                return this.trainingTypeNameField;
            }
            set {
                this.trainingTypeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Minutes {
            get {
                return this.minutesField;
            }
            set {
                this.minutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Distance {
            get {
                return this.distanceField;
            }
            set {
                this.distanceField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class TrainingBriefInfoResult {
        
        private int trainingIDField;
        
        private string trainingTypeNameField;
        
        private System.Nullable<int> minutesField;
        
        private System.Nullable<int> pointsField;
        
        private System.Nullable<int> stepsField;
        
        private TrainingTypeUnits unitField;
        
        private System.Nullable<double> distanceField;
        
        private string descriptionField;
        
        private System.DateTime startDateTimeField;
        
        private int trainingTypeIDField;
        
        private System.Nullable<int> intensityField;
        
        /// <remarks/>
        public int TrainingID {
            get {
                return this.trainingIDField;
            }
            set {
                this.trainingIDField = value;
            }
        }
        
        /// <remarks/>
        public string TrainingTypeName {
            get {
                return this.trainingTypeNameField;
            }
            set {
                this.trainingTypeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Minutes {
            get {
                return this.minutesField;
            }
            set {
                this.minutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Steps {
            get {
                return this.stepsField;
            }
            set {
                this.stepsField = value;
            }
        }
        
        /// <remarks/>
        public TrainingTypeUnits Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Distance {
            get {
                return this.distanceField;
            }
            set {
                this.distanceField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public int TrainingTypeID {
            get {
                return this.trainingTypeIDField;
            }
            set {
                this.trainingTypeIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Intensity {
            get {
                return this.intensityField;
            }
            set {
                this.intensityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class Training {
        
        private System.Nullable<int> trainingIDField;
        
        private int personIDField;
        
        private int raceIDField;
        
        private int trainingTypeIDField;
        
        private System.DateTime startDateTimeField;
        
        private string descriptionField;
        
        private System.Nullable<int> intensityField;
        
        private System.Nullable<int> minutesField;
        
        private System.Nullable<int> stepsField;
        
        private System.Nullable<int> pointsField;
        
        private System.Nullable<double> distanceField;
        
        private TrainingTypeUnits unitField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TrainingID {
            get {
                return this.trainingIDField;
            }
            set {
                this.trainingIDField = value;
            }
        }
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        public int TrainingTypeID {
            get {
                return this.trainingTypeIDField;
            }
            set {
                this.trainingTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDateTime {
            get {
                return this.startDateTimeField;
            }
            set {
                this.startDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Intensity {
            get {
                return this.intensityField;
            }
            set {
                this.intensityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Minutes {
            get {
                return this.minutesField;
            }
            set {
                this.minutesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Steps {
            get {
                return this.stepsField;
            }
            set {
                this.stepsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Distance {
            get {
                return this.distanceField;
            }
            set {
                this.distanceField = value;
            }
        }
        
        /// <remarks/>
        public TrainingTypeUnits Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class KeyValuePairOfStringString {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class AuthenticationResult {
        
        private System.Nullable<int> personIDField;
        
        private string firstNameField;
        
        private string lastnameField;
        
        private AuthenticationStatus statusField;
        
        private string passwordEncryptedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string Lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        /// <remarks/>
        public AuthenticationStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string PasswordEncrypted {
            get {
                return this.passwordEncryptedField;
            }
            set {
                this.passwordEncryptedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public enum AuthenticationStatus {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        NotFoundOrInvalidPassword,
        
        /// <remarks/>
        NotValidated,
        
        /// <remarks/>
        NewEmailNotValidated,
        
        /// <remarks/>
        AllLoginsAreInactivated,
        
        /// <remarks/>
        UserSecretNotInDatabase,
        
        /// <remarks/>
        ApplicationIDOutdatedVersion,
        
        /// <remarks/>
        InvalidApplicationID,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class LoginDetails {
        
        private System.Nullable<int> personIDField;
        
        private string applicationIDField;
        
        private string userNameField;
        
        private string passwordPlainTextField;
        
        private string passwordEncryptedField;
        
        private string secretField;
        
        private AuthenticationMethod methodField;
        
        private int siteTypeField;
        
        private System.Nullable<int> brandIDField;
        
        private System.Nullable<int> raceIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string ApplicationID {
            get {
                return this.applicationIDField;
            }
            set {
                this.applicationIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string PasswordPlainText {
            get {
                return this.passwordPlainTextField;
            }
            set {
                this.passwordPlainTextField = value;
            }
        }
        
        /// <remarks/>
        public string PasswordEncrypted {
            get {
                return this.passwordEncryptedField;
            }
            set {
                this.passwordEncryptedField = value;
            }
        }
        
        /// <remarks/>
        public string Secret {
            get {
                return this.secretField;
            }
            set {
                this.secretField = value;
            }
        }
        
        /// <remarks/>
        public AuthenticationMethod Method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        /// <remarks/>
        public int SiteType {
            get {
                return this.siteTypeField;
            }
            set {
                this.siteTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> BrandID {
            get {
                return this.brandIDField;
            }
            set {
                this.brandIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public enum AuthenticationMethod {
        
        /// <remarks/>
        UserNameAndPassword,
        
        /// <remarks/>
        Facebook,
        
        /// <remarks/>
        Google,
        
        /// <remarks/>
        RaceInternalByPersonID,
        
        /// <remarks/>
        RaceInternalByPersonIDAndPassword,
        
        /// <remarks/>
        FromApplicationToWeb,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class RacesAvailabilityResult {
        
        private string messageField;
        
        private RaceAvailableForLoginResult[] racesField;
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public RaceAvailableForLoginResult[] Races {
            get {
                return this.racesField;
            }
            set {
                this.racesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class RaceAvailableForLoginResult {
        
        private int raceIDField;
        
        private string raceTitleField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private string companyNameField;
        
        private string hostNameField;
        
        private string mobileHostNameField;
        
        private string brandNameField;
        
        /// <remarks/>
        public int RaceID {
            get {
                return this.raceIDField;
            }
            set {
                this.raceIDField = value;
            }
        }
        
        /// <remarks/>
        public string RaceTitle {
            get {
                return this.raceTitleField;
            }
            set {
                this.raceTitleField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public string HostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        public string MobileHostName {
            get {
                return this.mobileHostNameField;
            }
            set {
                this.mobileHostNameField = value;
            }
        }
        
        /// <remarks/>
        public string BrandName {
            get {
                return this.brandNameField;
            }
            set {
                this.brandNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class NewsStreamItem {
        
        private int idField;
        
        private NewsStreamItemTypes whatField;
        
        private string titleField;
        
        private string subTitleField;
        
        private string firstnameField;
        
        private string lastnameField;
        
        private System.Nullable<int> personIDField;
        
        private System.Nullable<int> pointsField;
        
        private string internalImageURLField;
        
        private System.DateTime publishedDateTimeField;
        
        private System.Nullable<TrainingTypeUnits> unitField;
        
        private string unitAsStringField;
        
        private string whatAsStringField;
        
        private System.Nullable<System.Guid> imageGUIDField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public NewsStreamItemTypes What {
            get {
                return this.whatField;
            }
            set {
                this.whatField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string SubTitle {
            get {
                return this.subTitleField;
            }
            set {
                this.subTitleField = value;
            }
        }
        
        /// <remarks/>
        public string Firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        /// <remarks/>
        public string Lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
        
        /// <remarks/>
        public string InternalImageURL {
            get {
                return this.internalImageURLField;
            }
            set {
                this.internalImageURLField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PublishedDateTime {
            get {
                return this.publishedDateTimeField;
            }
            set {
                this.publishedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<TrainingTypeUnits> Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        public string UnitAsString {
            get {
                return this.unitAsStringField;
            }
            set {
                this.unitAsStringField = value;
            }
        }
        
        /// <remarks/>
        public string WhatAsString {
            get {
                return this.whatAsStringField;
            }
            set {
                this.whatAsStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> ImageGUID {
            get {
                return this.imageGUIDField;
            }
            set {
                this.imageGUIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public enum NewsStreamItemTypes {
        
        /// <remarks/>
        Training,
        
        /// <remarks/>
        Medal,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.funbeatrace.com/MobileService.asmx")]
    public partial class NumberOfMedalsResult {
        
        private int personIDField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string pictureURLField;
        
        private int numberOfMedalsField;
        
        /// <remarks/>
        public int PersonID {
            get {
                return this.personIDField;
            }
            set {
                this.personIDField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string PictureURL {
            get {
                return this.pictureURLField;
            }
            set {
                this.pictureURLField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfMedals {
            get {
                return this.numberOfMedalsField;
            }
            set {
                this.numberOfMedalsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetAvailableMedalsCompletedEventHandler(object sender, GetAvailableMedalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableMedalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableMedalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedalResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedalResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetAvailableMedalsTranslatedCompletedEventHandler(object sender, GetAvailableMedalsTranslatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableMedalsTranslatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableMedalsTranslatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedalResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedalResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void EarnMedalCompletedEventHandler(object sender, EarnMedalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EarnMedalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EarnMedalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedalResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedalResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void EarnMedalTranslatedCompletedEventHandler(object sender, EarnMedalTranslatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EarnMedalTranslatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EarnMedalTranslatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MedalResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MedalResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void UnearnMedalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetNumberOfMedalsPerPersonCompletedEventHandler(object sender, GetNumberOfMedalsPerPersonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNumberOfMedalsPerPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNumberOfMedalsPerPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NumberOfMedalsResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NumberOfMedalsResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetMyNewsStreamCompletedEventHandler(object sender, GetMyNewsStreamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyNewsStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyNewsStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NewsStreamItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NewsStreamItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTeamStreamCompletedEventHandler(object sender, GetTeamStreamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NewsStreamItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NewsStreamItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetWhatsGoingOnCompletedEventHandler(object sender, GetWhatsGoingOnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWhatsGoingOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWhatsGoingOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetMyRankingCompletedEventHandler(object sender, GetMyRankingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyRankingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyRankingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetRacesAPersonCanLoginToCompletedEventHandler(object sender, GetRacesAPersonCanLoginToCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRacesAPersonCanLoginToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRacesAPersonCanLoginToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RaceAvailableForLoginResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RaceAvailableForLoginResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetRacesAvailabilityCompletedEventHandler(object sender, GetRacesAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRacesAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRacesAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RacesAvailabilityResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RacesAvailabilityResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AuthenticateLoginCompletedEventHandler(object sender, AuthenticateLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthenticationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthenticationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetRaceByRaceKeyCompletedEventHandler(object sender, GetRaceByRaceKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRaceByRaceKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRaceByRaceKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RaceDetailsResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RaceDetailsResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AuthorizeRaceAccessCompletedEventHandler(object sender, AuthorizeRaceAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeRaceAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeRaceAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RaceDetailsResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RaceDetailsResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetBrandSpecificTranslationStringsCompletedEventHandler(object sender, GetBrandSpecificTranslationStringsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrandSpecificTranslationStringsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrandSpecificTranslationStringsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public KeyValuePairOfStringString[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValuePairOfStringString[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetBrandSpecificTranslationStringsIOSCompletedEventHandler(object sender, GetBrandSpecificTranslationStringsIOSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrandSpecificTranslationStringsIOSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrandSpecificTranslationStringsIOSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTrainingCompletedEventHandler(object sender, GetTrainingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrainingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrainingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Training Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Training)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeleteTrainingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void SaveTrainingCompletedEventHandler(object sender, SaveTrainingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveTrainingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveTrainingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<int> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTotalNumberOfPointsCompletedEventHandler(object sender, GetTotalNumberOfPointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalNumberOfPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalNumberOfPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTrainingForCalendarCompletedEventHandler(object sender, GetTrainingForCalendarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrainingForCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrainingForCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrainingBriefInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrainingBriefInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTrainingTypesCompletedEventHandler(object sender, GetTrainingTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrainingTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrainingTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrainingType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrainingType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetMostRecentTrainingInTeamCompletedEventHandler(object sender, GetMostRecentTrainingInTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMostRecentTrainingInTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMostRecentTrainingInTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrainingAndPersonBriefInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrainingAndPersonBriefInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void SaveDailyActivityScoresCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetHighscores_BestSubTeamsCompletedEventHandler(object sender, GetHighscores_BestSubTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHighscores_BestSubTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHighscores_BestSubTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamScoreResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamScoreResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetHighscores_BestPersonsInTeamCompletedEventHandler(object sender, GetHighscores_BestPersonsInTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHighscores_BestPersonsInTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHighscores_BestPersonsInTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonScoreResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonScoreResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetRisingStarOfTheWeekCompletedEventHandler(object sender, GetRisingStarOfTheWeekCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRisingStarOfTheWeekCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRisingStarOfTheWeekCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonScoreResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonScoreResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetHighscores_BestPersonsInMyListCompletedEventHandler(object sender, GetHighscores_BestPersonsInMyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHighscores_BestPersonsInMyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHighscores_BestPersonsInMyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonScoreResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonScoreResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void IsMyFriendCompletedEventHandler(object sender, IsMyFriendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsMyFriendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsMyFriendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetMyFriendsCompletedEventHandler(object sender, GetMyFriendsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonBriefInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonBriefInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void RemoveFriendCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AddFriendsCompletedEventHandler(object sender, AddFriendsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFriendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFriendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetMostRecentTeamActivityCompletedEventHandler(object sender, GetMostRecentTeamActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMostRecentTeamActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMostRecentTeamActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActivityStream[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActivityStream[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetAllPersonsOfTheTeamCompletedEventHandler(object sender, GetAllPersonsOfTheTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPersonsOfTheTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPersonsOfTheTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonBriefInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonBriefInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTeamInfoCompletedEventHandler(object sender, GetTeamInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void UpdateTeamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTeamsByRaceIDCompletedEventHandler(object sender, GetTeamsByRaceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamsByRaceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamsByRaceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void CheckIfPersonIsManagerOfTeamCompletedEventHandler(object sender, CheckIfPersonIsManagerOfTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfPersonIsManagerOfTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIfPersonIsManagerOfTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTeamsPersonIsAManagerOfCompletedEventHandler(object sender, GetTeamsPersonIsAManagerOfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamsPersonIsAManagerOfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamsPersonIsAManagerOfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetTeamsPersonIsAMemberOfCompletedEventHandler(object sender, GetTeamsPersonIsAMemberOfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamsPersonIsAMemberOfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamsPersonIsAMemberOfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetMyTeamsCompletedEventHandler(object sender, GetMyTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TeamInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TeamInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void UpdateTeamPictureURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetNumberOfUnreadPersonalMessagesCompletedEventHandler(object sender, GetNumberOfUnreadPersonalMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNumberOfUnreadPersonalMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNumberOfUnreadPersonalMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void MarkPersonalMessagesAsReadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void MarkOrUnmarkPersonalMessageAsReadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void ArchivePersonalMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetPersonalMessagesCompletedEventHandler(object sender, GetPersonalMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPersonalMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPersonalMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonalMessageInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonalMessageInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetSentPersonalMessagesCompletedEventHandler(object sender, GetSentPersonalMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSentPersonalMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSentPersonalMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonalMessageInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonalMessageInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void SendPersonalMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeletePersonalMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void CreateReplyToMessageCompletedEventHandler(object sender, CreateReplyToMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateReplyToMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateReplyToMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetThreadsCompletedEventHandler(object sender, GetThreadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThreadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetThreadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ThreadInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ThreadInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetPostingCompletedEventHandler(object sender, GetPostingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Posting Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Posting)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void SavePostingCompletedEventHandler(object sender, SavePostingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePostingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePostingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void MarkThreadAsReadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetThreadCompletedEventHandler(object sender, GetThreadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThreadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetThreadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PostingInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PostingInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetPersonInfoCompletedEventHandler(object sender, GetPersonInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPersonInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPersonInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void SaveGoalCompletedEventHandler(object sender, SaveGoalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveGoalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveGoalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<int> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetGoalCompletedEventHandler(object sender, GetGoalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGoalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGoalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Goal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Goal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeleteGoalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetGoalsCompletedEventHandler(object sender, GetGoalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGoalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGoalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GoalBriefInfoResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GoalBriefInfoResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetGoalPeriodResultsCompletedEventHandler(object sender, GetGoalPeriodResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGoalPeriodResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGoalPeriodResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GoalPeriodResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GoalPeriodResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void ValidateUserNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void ValidateEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetRaceFromSignUpCodeCompletedEventHandler(object sender, GetRaceFromSignUpCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRaceFromSignUpCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRaceFromSignUpCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RaceShortInfoResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RaceShortInfoResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void UpdateMySettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AddPersonToTeamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetRaceCompletedEventHandler(object sender, GetRaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RaceDetailsResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RaceDetailsResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void UpdatePictureURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetMySettingsCompletedEventHandler(object sender, GetMySettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMySettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMySettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PersonInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PersonInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetParticipantOverviewCompletedEventHandler(object sender, GetParticipantOverviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParticipantOverviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParticipantOverviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ParticipantOverview Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ParticipantOverview)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void TemplateCallHelloWorldCompletedEventHandler(object sender, TemplateCallHelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TemplateCallHelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TemplateCallHelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void ValidateAndCreateSecretCompletedEventHandler(object sender, ValidateAndCreateSecretCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateAndCreateSecretCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateAndCreateSecretCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void ValidateAndCreateSecret_AlternateCompletedEventHandler(object sender, ValidateAndCreateSecret_AlternateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateAndCreateSecret_AlternateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateAndCreateSecret_AlternateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationResult)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591